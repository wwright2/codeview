<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>unordered_map - C++ Reference</title>
<link rel="canonical" href="http://www.cplusplus.com/reference/unordered_map/unordered_map/">
<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
<link rel="stylesheet" type="text/css" href="/v321/main.css">
<script src="/v321/main.js" type="text/javascript"></script>
<script type='text/javascript'>
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
(function() {
var gads = document.createElement('script');
gads.async = true;
gads.type = 'text/javascript';
var useSSL = 'https:' == document.location.protocol;
gads.src = (useSSL ? 'https:' : 'http:') + 
'//www.googletagservices.com/tag/js/gpt.js';
var node = document.getElementsByTagName('script')[0];
node.parentNode.insertBefore(gads, node);
})();
</script>

<script type='text/javascript'>
googletag.cmd.push(function() {
googletag.defineSlot('/32882001/L', [728, 90], 'div-gpt-ad-1427191279638-0').addService(googletag.pubads());
googletag.enableServices();
});
</script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="/" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="/reference/">Reference</a></li>
<li><a href="/reference/unordered_map/">&lt;unordered_map&gt;</a></li>
<li class="here">unordered_map</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support">
<div id='div-gpt-ad-1427191279638-0' style='width:728px; height:90px;'>
<script type='text/javascript'>
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1427191279638-0'); });
</script>
</div>
</div>
<div id="I_content">
<div class="C_doc">
<div id="I_type">class template</div>
<div id="I_file">&lt;unordered_map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>unordered_map<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt; class Key,                                    // unordered_map::key_type           class T,                                      // unordered_map::mapped_type           class Hash = hash&lt;Key&gt;,                       // unordered_map::hasher           class Pred = equal_to&lt;Key&gt;,                   // unordered_map::key_equal           class Alloc = allocator&lt; pair&lt;const Key,T&gt; &gt;  // unordered_map::allocator_type           &gt; class unordered_map;</pre></div><div id="I_description">Unordered Map</div>
<section id="description">
Unordered maps are associative containers that store elements formed by the combination of a <i>key value</i> and a <i>mapped value</i>, and which allows for fast retrieval of individual elements based on their keys.<br>
<br>
In an <tt>unordered_map</tt>, the <i>key value</i> is generally used to uniquely identify the element, while the <i>mapped value</i> is an object with the content associated to this <i>key</i>. Types of <i>key</i> and <i>mapped</i> value may differ.<br>
<br>
Internally, the elements in the <tt>unordered_map</tt> are not sorted in any particular order with respect to either their <i>key</i> or <i>mapped</i> values, but organized into <i>buckets</i> depending on their hash values to allow for fast access to individual elements directly by their <i>key values</i> (with a constant average time complexity on average).<br>
<br>
<tt>unordered_map</tt> containers are faster than <tt>map</tt> containers to access individual elements by their <i>key</i>, although they are generally less efficient for range iteration through a subset of their elements.<br>
<br>
Unordered maps implement the direct access operator (<tt>operator[]</tt>) which allows for direct access of the <i>mapped value</i> using its <i>key value</i> as argument.<br>
<br>
Iterators in the container are at least <a href="/ForwardIterator">forward iterators</a>.<br>
</section>
<br>
<section id="properties">
<h3>Container properties</h3>
<dl>
<dt>Associative</dt>
<dd>Elements in associative containers are referenced by their <i>key</i> and not by their absolute position in the container.</dd>
<dt>Unordered</dt>
<dd>Unordered containers organize their elements using hash tables that allow for fast access to elements by their <i>key</i>.</dd>
<dt>Map</dt>
<dd>Each element associates a <i>key</i> to a <i>mapped value</i>: Keys are meant to identify the elements whose main content is the mapped value.</dd>
<dt>Unique keys</dt>
<dd>No two elements in the container can have equivalent <i>keys</i>.</dd>
<dt>Allocator-aware</dt>
<dd>The container uses an allocator object to dynamically handle its storage needs.</dd>
</dl>
</section>
<br>
<section id="parameters">
<h3>Template parameters</h3>
<dl>
<dt>Key</dt>
<dd>Type of the key values. Each element in an <tt>unordered_map</tt> is uniquely identified by its key value.<br>
Aliased as member type <tt>unordered_map::key_type</tt>.</dd>
<dt>T</dt>
<dd>Type of the mapped value. Each element in an <tt>unordered_map</tt> is used to store some data as its mapped value.<br>
Aliased as member type <tt>unordered_map::mapped_type</tt>. Note that this is not the same as <tt>unordered_map::value_type</tt> (see below).</dd>
<dt>Hash</dt>
<dd>A unary function object type that takes an object of type <i>key type</i> as argument and returns a unique value of type <a href="/size_t">size_t</a> based on it. This can either be a class implementing a <i>function call operator</i> or a pointer to a function (see <a href="/unordered_map::unordered_map">constructor</a> for an example). This defaults to <tt><a href="/hash">hash</a>&lt;Key&gt;</tt>, which returns a hash value with a probability of collision approaching <tt>1.0/std::numeric_limits&lt;size_t&gt;::max()</tt>.<br>
The <tt>unordered_map</tt> object uses the hash values returned by this function to organize its elements internally, speeding up the process of locating individual elements.<br>
Aliased as member type <tt>unordered_map::hasher</tt>.</dd>
<dt>Pred</dt>
<dd>A binary predicate that takes two arguments of the <i>key type</i> and returns a <tt>bool</tt>. The expression <tt>pred(a,b)</tt>, where <i>pred</i> is an object of this type and <i>a</i> and <i>b</i> are key values, shall return <tt>true</tt> if <i>a</i> is to be considered equivalent to <i>b</i>. This can either be a class implementing a <i>function call operator</i> or a pointer to a function (see <a href="/unordered_map::unordered_map">constructor</a> for an example). This defaults to <tt><a href="/equal_to">equal_to</a>&lt;Key&gt;</tt>, which returns the same as applying the <i>equal-to operator</i> (<tt>a==b</tt>).<br>
The <tt>unordered_map</tt> object uses this expression to determine whether two element keys are equivalent. No two elements in an <tt>unordered_map</tt> container can have keys that yield <tt>true</tt> using this predicate.<br>
Aliased as member type <tt>unordered_map::key_equal</tt>.</dd>
<dt>Alloc</dt>
<dd>Type of the allocator object used to define the storage allocation model. By default, the <a href="/allocator">allocator</a> class template is used, which defines the simplest memory allocation model and is value-independent.<br>
Aliased as member type <tt>unordered_map::allocator_type</tt>.</dd>
</dl>
<br>
In the reference for the <tt>unordered_map</tt> member functions, these same names (<i>Key</i>, <i>T</i>, <i>Hash</i>, <i>Pred</i> and <i>Alloc</i>) are assumed for the template parameters.<br>
<br>
Iterators to elements of <tt>unordered_map</tt> containers access to both the <i>key</i> and the <i>mapped value</i>. For this, the class defines what is called its <tt>value_type</tt>, which is a <a href="/pair">pair</a> class with its <tt>first</tt> value corresponding to the <tt>const</tt> version of the <i>key</i> type (template parameter <i>Key</i>) and its <tt>second</tt> value corresponding to the <i>mapped value</i> (template parameter <i>T</i>):<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>&nbsp;</code></pre></td>
<td class="source"><pre><code><var>typedef</var> pair&lt;<var>const</var> Key, T&gt; value_type;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Iterators of a <tt>unordered_map</tt> container point to elements of this <tt>value_type</tt>. Thus, for an iterator called <tt>it</tt> that points to an element of a <tt>map</tt>, its key and mapped value can be accessed respectively with:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code>unordered_map&lt;Key,T&gt;::iterator it;
(*it).first;             <cite>// the key value (of type Key)</cite>
(*it).second;            <cite>// the mapped value (of type T)</cite>
(*it);                   <cite>// the "element value" (of type pair&lt;const Key,T&gt;) </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Naturally, any other direct access operator, such as <tt>-&gt;</tt> or <tt>[]</tt> can be used, for example:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br></code></pre></td>
<td class="source"><pre><code>it-&gt;first;               <cite>// same as (*it).first   (the key value)</cite>
it-&gt;second;              <cite>// same as (*it).second  (the mapped value) </cite></code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="types">
<h3>Member types</h3>
The following aliases are member types of <tt>unordered_map</tt>. They are widely used as parameter and return types by member functions:<br>
<br>
<div class="C_SwitchCases">
<div title="C++11">
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>key_type</tt></td><td>the first template parameter (<tt>Key</tt>)</td><td></td></tr>
<tr><td><tt>mapped_type</tt></td><td>the second template parameter (<tt>T</tt>)</td><td></td></tr>
<tr><td><tt>value_type</tt></td><td><tt><a href="/pair">pair</a>&lt;const key_type,mapped_type&gt;</tt></td><td></td></tr>
<tr><td><tt>hasher</tt></td><td>the third template parameter (<tt>Hash</tt>)</td><td>defaults to: <tt><a href="/hash">hash</a>&lt;key_type&gt;</tt></td></tr>
<tr><td><tt>key_equal</tt></td><td>the fourth template parameter (<tt>Pred</tt>)</td><td>defaults to: <tt><a href="/equal_to">equal_to</a>&lt;key_type&gt;</tt></td></tr>
<tr><td><tt>allocator_type</tt></td><td>the fifth template parameter (<tt>Alloc</tt>)</td><td>defaults to: <tt><a href="/allocator">allocator</a>&lt;value_type&gt;</tt></td></tr>
<tr><td><tt>reference</tt></td><td><tt>Alloc::reference</tt></td><td></td></tr>
<tr><td><tt>const_reference</tt></td><td><tt>Alloc::const_reference</tt></td><td></td></tr>
<tr><td><tt>pointer</tt></td><td><tt>Alloc::pointer</tt></td><td>for the default <a href="/allocator">allocator</a>: <tt>value_type*</tt></td></tr>
<tr><td><tt>const_pointer</tt></td><td><tt>Alloc::const_pointer</tt></td><td>for the default <a href="/allocator">allocator</a>: <tt>const value_type*</tt></td></tr>
<tr><td><tt>iterator</tt></td><td>a <a href="/ForwardIterator">forward iterator</a> to <tt>value_type</tt></td><td></td></tr>
<tr><td><tt>const_iterator</tt></td><td>a <a href="/ForwardIterator">forward iterator</a> to <tt>const value_type</tt></td><td></td></tr>
<tr><td><tt>local_iterator</tt></td><td>a <a href="/ForwardIterator">forward iterator</a> to <tt>value_type</tt></td><td></td></tr>
<tr><td><tt>const_local_iterator</tt></td><td>a <a href="/ForwardIterator">forward iterator</a> to <tt>const value_type</tt></td><td></td></tr>
<tr><td><tt>size_type</tt></td><td>an unsigned integral type</td><td>usually the same as <a href="/size_t">size_t</a></td></tr>
<tr><td><tt>difference_type</tt></td><td>a signed integral type</td><td>usually the same as <a href="/ptrdiff_t">ptrdiff_t</a></td></tr>
</table>
</div>
<div title="C++14">
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>key_type</tt></td><td>the first template parameter (<tt>Key</tt>)</td><td></td></tr>
<tr><td><tt>mapped_type</tt></td><td>the second template parameter (<tt>T</tt>)</td><td></td></tr>
<tr><td><tt>value_type</tt></td><td><tt><a href="/pair">pair</a>&lt;const key_type,mapped_type&gt;</tt></td><td></td></tr>
<tr><td><tt>hasher</tt></td><td>the third template parameter (<tt>Hash</tt>)</td><td>defaults to: <tt><a href="/hash">hash</a>&lt;key_type&gt;</tt></td></tr>
<tr><td><tt>key_equal</tt></td><td>the fourth template parameter (<tt>Pred</tt>)</td><td>defaults to: <tt><a href="/equal_to">equal_to</a>&lt;key_type&gt;</tt></td></tr>
<tr><td><tt>allocator_type</tt></td><td>the fifth template parameter (<tt>Alloc</tt>)</td><td>defaults to: <tt><a href="/allocator">allocator</a>&lt;value_type&gt;</tt></td></tr>
<tr><td><tt>reference</tt></td><td><tt>value_type&</tt></td><td></td></tr>
<tr><td><tt>const_reference</tt></td><td><tt>const value_type&</tt></td><td></td></tr>
<tr><td><tt>pointer</tt></td><td><tt>allocator_traits&lt;Alloc&gt;::pointer</tt></td><td>for the default <a href="/allocator">allocator</a>: <tt>value_type*</tt></td></tr>
<tr><td><tt>const_pointer</tt></td><td><tt>allocator_traits&lt;Alloc&gt;::const_pointer</tt></td><td>for the default <a href="/allocator">allocator</a>: <tt>const value_type*</tt></td></tr>
<tr><td><tt>iterator</tt></td><td>a <a href="/ForwardIterator">forward iterator</a> to <tt>value_type</tt></td><td></td></tr>
<tr><td><tt>const_iterator</tt></td><td>a <a href="/ForwardIterator">forward iterator</a> to <tt>const value_type</tt></td><td></td></tr>
<tr><td><tt>local_iterator</tt></td><td>a <a href="/ForwardIterator">forward iterator</a> to <tt>value_type</tt></td><td></td></tr>
<tr><td><tt>const_local_iterator</tt></td><td>a <a href="/ForwardIterator">forward iterator</a> to <tt>const value_type</tt></td><td></td></tr>
<tr><td><tt>size_type</tt></td><td>an unsigned integral type</td><td>usually the same as <a href="/size_t">size_t</a></td></tr>
<tr><td><tt>difference_type</tt></td><td>a signed integral type</td><td>usually the same as <a href="/ptrdiff_t">ptrdiff_t</a></td></tr>
</table>
</div>
</div>
</section>
<br>
<section id="functions">
<h3>Member functions</h3>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/unordered_map/"><b>(constructor)</b></a></dt><dd>Construct unordered_map <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/~unordered_map/"><b>(destructor)</b></a></dt><dd>Destroy unordered map <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/operator=/"><b>operator=</b></a></dt><dd>Assign content <span class="typ">(public member function)</span></dd></dl>
<br>
<h4>Capacity</h4>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/empty/"><b>empty</b></a></dt><dd>Test whether container is empty <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/size/"><b>size</b></a></dt><dd>Return container size <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/max_size/"><b>max_size</b></a></dt><dd>Return maximum size <span class="typ">(public member function)</span></dd></dl>
<br>
<h4>Iterators</h4>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/begin/"><b>begin</b></a></dt><dd>Return iterator to beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/end/"><b>end</b></a></dt><dd>Return iterator to end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/cbegin/"><b>cbegin</b></a></dt><dd>Return const_iterator to beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/cend/"><b>cend</b></a></dt><dd>Return const_iterator to end <span class="typ">(public member function)</span></dd></dl>
<br>
<h4>Element access</h4>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/operator[]/"><b>operator[]</b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/at/"><b>at</b></a></dt><dd>Access element <span class="typ">(public member function)</span></dd></dl>
<br>
<h4>Element lookup</h4>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/find/"><b>find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/count/"><b>count</b></a></dt><dd>Count elements with a specific key <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/equal_range/"><b>equal_range</b></a></dt><dd>Get range of elements with specific key <span class="typ">(public member function)</span></dd></dl>
<br>
<h4>Modifiers</h4>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/emplace/"><b>emplace</b></a></dt><dd>Construct and insert element <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/emplace_hint/"><b>emplace_hint</b></a></dt><dd>Construct and insert element with hint <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/insert/"><b>insert</b></a></dt><dd>Insert elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/erase/"><b>erase</b></a></dt><dd>Erase elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/clear/"><b>clear</b></a></dt><dd>Clear content <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/swap/"><b>swap</b></a></dt><dd>Swap content <span class="typ">(public member function)</span></dd></dl>
<br>
<h4>Buckets</h4>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/bucket_count/"><b>bucket_count</b></a></dt><dd>Return number of buckets <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/max_bucket_count/"><b>max_bucket_count</b></a></dt><dd>Return maximum number of buckets <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/bucket_size/"><b>bucket_size</b></a></dt><dd>Return bucket size <span class="typ">(public member type)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/bucket/"><b>bucket</b></a></dt><dd>Locate element's bucket <span class="typ">(public member function)</span></dd></dl>
<br>
<h4>Hash policy</h4>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/load_factor/"><b>load_factor</b></a></dt><dd>Return load factor <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/max_load_factor/"><b>max_load_factor</b></a></dt><dd>Get or set maximum load factor <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/rehash/"><b>rehash</b></a></dt><dd>Set number of buckets <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/reserve/"><b>reserve</b></a></dt><dd>Request a capacity change <span class="typ">(public member function)</span></dd></dl>
<br>
<h4>Observers</h4>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/hash_function/"><b>hash_function</b></a></dt><dd>Get hash function <span class="typ">(public member type)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/key_eq/"><b>key_eq</b></a></dt><dd>Get key equivalence predicate <span class="typ">(public member type)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/get_allocator/"><b>get_allocator</b></a></dt><dd>Get allocator <span class="typ">(public member function)</span></dd></dl>
<br>
<h3>Non-member function overloads</h3>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/operators/"><b>operators (unordered_map)</b></a></dt><dd>Relational operators for unordered_map <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_map/swap(global)/"><b>swap (unordered_map)</b></a></dt><dd>Exchanges contents of two unordered_map containers <span class="typ">(function template)</span></dd></dl>
</section>
</div><div id="CH_bb"></div></div>
<script type="text/javascript">
    google_ad_client = "ca-pub-1444228343479937";
    google_ad_slot = "9701143201";
    google_ad_width = 728;
    google_ad_height = 90;
</script>
<!-- leaderboard -->
<script type="text/javascript"
src="//pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="/">C++</a></b></h3>
<ul>
<li class="folder info"><a href="/info/">Information</a></li>
<li class="folder doc"><a href="/doc/">Tutorials</a></li>
<li class="folder selected reference"><a href="/reference/">Reference</a></li>
<li class="folder articles"><a href="/articles/">Articles</a></li>
<li class="folder forum"><a href="/forum/">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="/reference/">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="/reference/clibrary/">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cassert/"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cctype/"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cerrno/"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cfenv/"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cfloat/"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cinttypes/"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ciso646/"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/climits/"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/clocale/"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cmath/"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csetjmp/"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csignal/"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdarg/"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cstdbool/"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstddef/"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cstdint/"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdio/"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdlib/"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstring/"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/ctgmath/"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ctime/"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cuchar/"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwchar/"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwctype/"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="/reference/stl/">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/array/"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/deque/"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/forward_list/"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/list/"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/map/"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/queue/"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/set/"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stack/"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 selected folder"><a href="/reference/unordered_map/"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_set/"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/vector/"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/iolibrary/">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/fstream/"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iomanip/"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ios/"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iosfwd/"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iostream/"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/istream/"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ostream/"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/sstream/"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/streambuf/"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/multithreading/">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/atomic/"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/condition_variable/"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/future/"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/thread/"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/std/">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/algorithm/"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/bitset/"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/chrono/"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/codecvt/"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/complex/"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/exception/"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/functional/"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/initializer_list/"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iterator/"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/limits/"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/locale/"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/memory/"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/new/"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/numeric/"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/random/"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/ratio/"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/regex/"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stdexcept/"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/string/"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/system_error/"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/tuple/"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/typeindex/"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/typeinfo/"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/type_traits/"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/utility/"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/valarray/"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="unordered_map_box">
<h3><b><a href="/reference/unordered_map/">&lt;unordered_map&gt;</a></b></h3>
<ul>
<li class="cpp11 selected folder"><a href="/reference/unordered_map/unordered_map/"><span>unordered_map</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_map/unordered_multimap/"><span>unordered_multimap</span></a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="unordered_map_box">
<h3><b><a href="/reference/unordered_map/unordered_map/">unordered_map</a></b></h3>
<ul>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/unordered_map/"><span>unordered_map::unordered_map</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/~unordered_map/"><span>unordered_map::~unordered_map</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/at/"><span>unordered_map::at</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/begin/"><span>unordered_map::begin</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/bucket/"><span>unordered_map::bucket</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/bucket_count/"><span>unordered_map::bucket_count</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/bucket_size/"><span>unordered_map::bucket_size</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/cbegin/"><span>unordered_map::cbegin</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/cend/"><span>unordered_map::cend</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/clear/"><span>unordered_map::clear</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/count/"><span>unordered_map::count</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/emplace/"><span>unordered_map::emplace</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/emplace_hint/"><span>unordered_map::emplace_hint</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/empty/"><span>unordered_map::empty</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/end/"><span>unordered_map::end</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/equal_range/"><span>unordered_map::equal_range</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/erase/"><span>unordered_map::erase</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/find/"><span>unordered_map::find</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/get_allocator/"><span>unordered_map::get_allocator</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/hash_function/"><span>unordered_map::hash_function</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/insert/"><span>unordered_map::insert</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/key_eq/"><span>unordered_map::key_eq</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/load_factor/"><span>unordered_map::load_factor</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/max_bucket_count/"><span>unordered_map::max_bucket_count</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/max_load_factor/"><span>unordered_map::max_load_factor</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/max_size/"><span>unordered_map::max_size</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/operator=/"><span>unordered_map::operator=</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/operator[]/"><span>unordered_map::operator[]</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/rehash/"><span>unordered_map::rehash</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/reserve/"><span>unordered_map::reserve</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/size/"><span>unordered_map::size</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/swap/"><span>unordered_map::swap</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>non-member overloads:</h4><ul>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/operators/"><span>operators (unordered_map)</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_map/swap(global)/"><span>swap (unordered_map)</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="/">Home page</a> | <a href="/privacy.do">Privacy policy</a><br>&copy; cplusplus.com, 2000-2016 - All rights reserved - <i>v3.1</i><br><a href="/contact.do?referrer=www.cplusplus.com%2Freference%2Funordered_map%2Funordered_map%2F">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			el.appendChild(btn('New Page','New Page','new','/reference/new.cgi?a=unordered_map+unordered_map'));
			el.appendChild(btn('Edit Page','Edit Page','edit','/reference/edit.cgi?a=unordered_map+unordered_map'));
			
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='/reference/delete.cgi?a=unordered_map+unordered_map'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>