<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>list::merge - C++ Reference</title>
<link rel="canonical" href="http://www.cplusplus.com/reference/list/list/merge/">
<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
<link rel="stylesheet" type="text/css" href="/v321/main.css">
<script src="/v321/main.js" type="text/javascript"></script>
<script type='text/javascript'>
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
(function() {
var gads = document.createElement('script');
gads.async = true;
gads.type = 'text/javascript';
var useSSL = 'https:' == document.location.protocol;
gads.src = (useSSL ? 'https:' : 'http:') + 
'//www.googletagservices.com/tag/js/gpt.js';
var node = document.getElementsByTagName('script')[0];
node.parentNode.insertBefore(gads, node);
})();
</script>

<script type='text/javascript'>
googletag.cmd.push(function() {
googletag.defineSlot('/32882001/L', [728, 90], 'div-gpt-ad-1427191279638-0').addService(googletag.pubads());
googletag.enableServices();
});
</script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="/" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="/reference/">Reference</a></li>
<li><a href="/reference/list/">&lt;list&gt;</a></li>
<li><a href="/reference/list/list/">list</a></li>
<li class="here">merge</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support">
<div id='div-gpt-ad-1427191279638-0' style='width:728px; height:90px;'>
<script type='text/javascript'>
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1427191279638-0'); });
</script>
</div>
</div>
<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;list&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/list/list/">list</a>::merge</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>(1)</th><td><pre>  void merge (list&amp; x);</pre></td></tr><tr class="even"><th>(2)</th><td><pre>template &lt;class Compare&gt;  void merge (list&amp; x, Compare comp);</pre></td></tr></table></div>
<div title="C++11" class="off">
<table><tr class="odd"><th>(1)</th><td><pre>  void merge (list&amp; x);  void merge (list&amp;&amp; x);</pre></td></tr><tr class="even"><th>(2)</th><td><pre>template &lt;class Compare&gt;  void merge (list&amp; x, Compare comp);template &lt;class Compare&gt;  void merge (list&amp;&amp; x, Compare comp);</pre></td></tr></table></div>
</div>
</div><div id="I_description">Merge sorted lists</div>
<section id="description">
Merges <i>x</i> into the <a href="/list">list</a> by transferring all of its elements at their respective ordered positions into the container (both containers shall already be ordered).<br>
<br>
This effectively removes all the elements in <i>x</i> (which becomes <a href="/list::empty">empty</a>), and inserts them into their ordered position within container (which expands in <a href="/list::size">size</a> by the number of elements transferred). The operation is performed without constructing nor destroying any element: they are transferred, no matter whether <i>x</i> is an lvalue or an rvalue, or whether the <tt>value_type</tt> supports move-construction or not.<br>
<br>
The template versions with two parameters (2), have the same behavior, but take a specific predicate (<i>comp</i>) to perform the comparison operation between elements. This comparison shall produce a <i>strict weak ordering</i> of the elements (i.e., a consistent transitive comparison, without considering its reflexiveness).<br>
<br>
This function requires that the <a href="/list">list</a> containers have their elements already ordered by value (or by <i>comp</i>) before the call. For an alternative on unordered lists, see <a href="/list::splice">list::splice</a>.<br>
<br>
Assuming such ordering, each element of <i>x</i> is inserted at the position that corresponds to its value according to the <i>strict weak ordering</i> defined by <tt>operator&lt;</tt> or <i>comp</i>. The resulting order of equivalent elements is stable (i.e., equivalent elements preserve the relative order they had before the call, and existing elements precede those equivalent inserted from <i>x</i>).<br>
<br>
The function does nothing if <tt>(&x == this)</tt>.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>x</dt>
<dd>A <a href="/list">list</a> object of the same type (i.e., with the same template parameters, <tt>T</tt> and <tt>Alloc</tt>).<br>
Note that this function modifies <i>x</i> no matter whether an <i>lvalue</i> or <i>rvalue</i> reference is passed.</dd>
<dt>comp</dt>
<dd>Binary predicate that, taking two values of the same type than those contained in the <a href="/list">list</a>, returns <tt>true</tt> if the first argument is considered to go before the second in the <i>strict weak ordering</i> it defines, and <tt>false</tt> otherwise.<br>
This shall be a function pointer or a function object.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
none<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br></code></pre></td>
<td class="source"><pre><code><cite>// list::merge</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;list&gt;</dfn>

<cite>// compare only integral part:</cite>
<var>bool</var> mycomparison (<var>double</var> first, <var>double</var> second)
{ <var>return</var> ( <var>int</var>(first)&lt;<var>int</var>(second) ); }

<var>int</var> main ()
{
  std::list&lt;<var>double</var>&gt; first, second;

  first.push_back (3.1);
  first.push_back (2.2);
  first.push_back (2.9);

  second.push_back (3.7);
  second.push_back (7.1);
  second.push_back (1.4);

  first.sort();
  second.sort();

  first.merge(second);

  <cite>// (second is now empty)</cite>

  second.push_back (2.1);

  first.merge(second,mycomparison);

  std::cout &lt;&lt; <kbd>"first contains:"</kbd>;
  <var>for</var> (std::list&lt;<var>double</var>&gt;::iterator it=first.begin(); it!=first.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>first contains: 1.4 2.2 2.9 2.1 3.1 3.7 7.1
</samp></pre></td></tr></table></div>
Notice how in the second merger, the function <tt>mycomparison</tt> (which only compares the integral parts) did not consider <tt>2.1</tt> lower than <tt>2.2</tt> or <tt>2.9</tt>, so it was inserted right after them, before <tt>3.1</tt>.<br>
</section>
<br>
<br>
<section id="complexity">
<h3>Complexity</h3>
At most, linear in the sum of both container sizes minus one (comparisons).<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes on the iterators, pointers and references related to the container before the call.<br>
The iterators, pointers and references that referred to transferred elements keep referring to those same elements, but iterators now iterate into the container the elements have been transferred to.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Both the container and <i>x</i> are modified.<br>
Concurrently accessing or modifying their elements is safe, although iterating through either container is not.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
If the <a href="/list::get_allocator">allocators</a> in both containers do not compare equal, if <i>comp</i> does not define a <i>strict weak ordering</i>, or if the container elements are not ordered according to it, it causes <i>undefined behavior</i>.<br>
Otherwise, if an exception is thrown by a comparison, the container is left in a valid state (basic guarantee).<br>
Otherwise, if an exception is thrown, there are no changes in the container (strong guarantee).<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/list/list/splice/"><b>list::splice</b></a></dt><dd>Transfer elements from list to list <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/list/list/insert/"><b>list::insert</b></a></dt><dd>Insert elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/list/list/remove/"><b>list::remove</b></a></dt><dd>Remove elements with specific value <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/list/list/erase/"><b>list::erase</b></a></dt><dd>Erase elements <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/list/list/push_back/"><b>list::push_back</b></a></dt><dd>Add element at the end <span class="typ">(public member function)</span></dd></dl></div><div id="CH_bb"></div></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="/">C++</a></b></h3>
<ul>
<li class="folder info"><a href="/info/">Information</a></li>
<li class="folder doc"><a href="/doc/">Tutorials</a></li>
<li class="folder selected reference"><a href="/reference/">Reference</a></li>
<li class="folder articles"><a href="/articles/">Articles</a></li>
<li class="folder forum"><a href="/forum/">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="/reference/">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="/reference/clibrary/">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cassert/"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cctype/"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cerrno/"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cfenv/"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cfloat/"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cinttypes/"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ciso646/"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/climits/"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/clocale/"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cmath/"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csetjmp/"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csignal/"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdarg/"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cstdbool/"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstddef/"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cstdint/"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdio/"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdlib/"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstring/"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/ctgmath/"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ctime/"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cuchar/"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwchar/"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwctype/"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="/reference/stl/">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/array/"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/deque/"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/forward_list/"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="/reference/list/"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/map/"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/queue/"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/set/"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stack/"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_map/"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_set/"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/vector/"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/iolibrary/">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/fstream/"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iomanip/"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ios/"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iosfwd/"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iostream/"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/istream/"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ostream/"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/sstream/"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/streambuf/"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/multithreading/">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/atomic/"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/condition_variable/"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/future/"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/thread/"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/std/">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/algorithm/"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/bitset/"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/chrono/"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/codecvt/"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/complex/"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/exception/"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/functional/"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/initializer_list/"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iterator/"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/limits/"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/locale/"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/memory/"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/new/"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/numeric/"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/random/"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/ratio/"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/regex/"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stdexcept/"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/string/"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/system_error/"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/tuple/"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/typeindex/"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/typeinfo/"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/type_traits/"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/utility/"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/valarray/"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="list_box">
<h3><b><a href="/reference/list/">&lt;list&gt;</a></b></h3>
<ul>
<li class="cpp98 cpp11 selected folder"><a href="/reference/list/list/"><span>list</span></a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="list_box">
<h3><b><a href="/reference/list/list/">list</a></b></h3>
<ul>
<li class="cpp98 cpp11"><a href="/reference/list/list/list/"><span>list::list</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/~list/"><span>list::~list</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp98 cpp11"><a href="/reference/list/list/assign/"><span>list::assign</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/back/"><span>list::back</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/begin/"><span>list::begin</span></a></li>
<li class="cpp11"><a href="/reference/list/list/cbegin/"><span>list::cbegin</span></a></li>
<li class="cpp11"><a href="/reference/list/list/cend/"><span>list::cend</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/clear/"><span>list::clear</span></a></li>
<li class="cpp11"><a href="/reference/list/list/crbegin/"><span>list::crbegin</span></a></li>
<li class="cpp11"><a href="/reference/list/list/crend/"><span>list::crend</span></a></li>
<li class="cpp11"><a href="/reference/list/list/emplace/"><span>list::emplace</span></a></li>
<li class="cpp11"><a href="/reference/list/list/emplace_back/"><span>list::emplace_back</span></a></li>
<li class="cpp11"><a href="/reference/list/list/emplace_front/"><span>list::emplace_front</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/empty/"><span>list::empty</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/end/"><span>list::end</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/erase/"><span>list::erase</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/front/"><span>list::front</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/get_allocator/"><span>list::get_allocator</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/insert/"><span>list::insert</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/max_size/"><span>list::max_size</span></a></li>
<li class="cpp98 cpp11 selected"><a href="/reference/list/list/merge/"><span>list::merge</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/operator=/"><span>list::operator=</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/pop_back/"><span>list::pop_back</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/pop_front/"><span>list::pop_front</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/push_back/"><span>list::push_back</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/push_front/"><span>list::push_front</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/rbegin/"><span>list::rbegin</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/remove/"><span>list::remove</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/remove_if/"><span>list::remove_if</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/rend/"><span>list::rend</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/resize/"><span>list::resize</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/reverse/"><span>list::reverse</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/size/"><span>list::size</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/sort/"><span>list::sort</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/splice/"><span>list::splice</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/swap/"><span>list::swap</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/unique/"><span>list::unique</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>non-member overloads:</h4><ul>
<li class="cpp98 cpp11"><a href="/reference/list/list/operators/"><span>relational operators (list)</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/list/list/swap-free/"><span>swap (list)</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="/">Home page</a> | <a href="/privacy.do">Privacy policy</a><br>&copy; cplusplus.com, 2000-2016 - All rights reserved - <i>v3.1</i><br><a href="/contact.do?referrer=www.cplusplus.com%2Freference%2Flist%2Flist%2Fmerge%2F">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','/reference/edit.cgi?a=list+list+merge'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='/reference/delete.cgi?a=list+list+merge'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>