<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>set::set - C++ Reference</title>
<link rel="canonical" href="http://www.cplusplus.com/reference/set/set/set/">
<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
<link rel="stylesheet" type="text/css" href="/v321/main.css">
<script src="/v321/main.js" type="text/javascript"></script>
<script type='text/javascript'>
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
(function() {
var gads = document.createElement('script');
gads.async = true;
gads.type = 'text/javascript';
var useSSL = 'https:' == document.location.protocol;
gads.src = (useSSL ? 'https:' : 'http:') + 
'//www.googletagservices.com/tag/js/gpt.js';
var node = document.getElementsByTagName('script')[0];
node.parentNode.insertBefore(gads, node);
})();
</script>

<script type='text/javascript'>
googletag.cmd.push(function() {
googletag.defineSlot('/32882001/L', [728, 90], 'div-gpt-ad-1427191279638-0').addService(googletag.pubads());
googletag.enableServices();
});
</script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="/" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="/reference/">Reference</a></li>
<li><a href="/reference/set/">&lt;set&gt;</a></li>
<li><a href="/reference/set/set/">set</a></li>
<li class="here">set</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support">
<div id='div-gpt-ad-1427191279638-0' style='width:728px; height:90px;'>
<script type='text/javascript'>
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1427191279638-0'); });
</script>
</div>
</div>
<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;set&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/set/set/">set</a>::set</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>empty (1)</th><td><pre>explicit set (const key_compare&amp; comp = key_compare(),              const allocator_type&amp; alloc = allocator_type());</pre></td></tr><tr class="even"><th>range (2)</th><td><pre>template &lt;class InputIterator&gt;  set (InputIterator first, InputIterator last,       const key_compare&amp; comp = key_compare(),       const allocator_type&amp; alloc = allocator_type());</pre></td></tr><tr class="odd"><th>copy (3)</th><td><pre>set (const set&amp; x);</pre></td></tr></table></div>
<div title="C++11" class="off">
<table><tr class="even"><th>empty (1)</th><td><pre>explicit set (const key_compare&amp; comp = key_compare(),              const allocator_type&amp; alloc = allocator_type());explicit set (const allocator_type&amp; alloc);</pre></td></tr><tr class="odd"><th>range (2)</th><td><pre>template &lt;class InputIterator&gt;  set (InputIterator first, InputIterator last,       const key_compare&amp; comp = key_compare(),       const allocator_type&amp; = allocator_type());</pre></td></tr><tr class="even"><th>copy (3)</th><td><pre>set (const set&amp; x);set (const set&amp; x, const allocator_type&amp; alloc);</pre></td></tr><tr class="odd"><th>move (4)</th><td><pre>set (set&amp;&amp; x);set (set&amp;&amp; x, const allocator_type&amp; alloc);</pre></td></tr><tr class="even"><th>initializer list (5)</th><td><pre>set (initializer_list&lt;value_type&gt; il,     const key_compare&amp; comp = key_compare(),     const allocator_type&amp; alloc = allocator_type());</pre></td></tr></table></div>
<div title="C++14" class="off">
<table><tr class="odd"><th>empty (1)</th><td><pre>set();explicit set (const key_compare&amp; comp,              const allocator_type&amp; alloc = allocator_type());explicit set (const allocator_type&amp; alloc);</pre></td></tr><tr class="even"><th>range (2)</th><td><pre>template &lt;class InputIterator&gt;  set (InputIterator first, InputIterator last,       const key_compare&amp; comp = key_compare(),       const allocator_type&amp; = allocator_type());template &lt;class InputIterator&gt;  set (InputIterator first, InputIterator last,       const allocator_type&amp; = allocator_type());</pre></td></tr><tr class="odd"><th>copy (3)</th><td><pre>set (const set&amp; x);set (const set&amp; x, const allocator_type&amp; alloc);</pre></td></tr><tr class="even"><th>move (4)</th><td><pre>set (set&amp;&amp; x);set (set&amp;&amp; x, const allocator_type&amp; alloc);</pre></td></tr><tr class="odd"><th>initializer list (5)</th><td><pre>set (initializer_list&lt;value_type&gt; il,     const key_compare&amp; comp = key_compare(),     const allocator_type&amp; alloc = allocator_type());set (initializer_list&lt;value_type&gt; il,     const allocator_type&amp; alloc = allocator_type());</pre></td></tr></table></div>
</div>
</div><div id="I_description">Construct set</div>
<section id="description">
Constructs a <a href="/set">set</a> container object, initializing its contents depending on the constructor version used:<br>
<br>
<div class="C_SwitchCases">
<div title="C++98">
<dl>
<dt>(1) empty container constructor (default constructor)</dt>
<dd>Constructs an <a href="/set::empty">empty</a> container, with no elements.</dd>
<dt>(2) range constructor</dt>
<dd>Constructs a container with as many elements as the range <tt>[first,last)</tt>, with each element constructed from its corresponding element in that range.</dd>
<dt>(3) copy constructor</dt>
<dd>Constructs a container with a copy of each of the elements in <i>x</i>.</dd>
</dl>
<br>
The container keeps an internal copy of <i>alloc</i> and <i>comp</i>, which are used to allocate storage and to sort the elements throughout its lifetime.<br>
The copy constructor <i>(3)</i> creates a container that keeps and uses copies of <i>x</i>'s <a href="/set::get_allocator">allocator</a> and <a href="/set::key_comp">comparison object</a>.<br>
<br>
The storage for the elements is allocated using this <a href="/set::get_allocator">internal allocator</a>.<br>
</div>
<div title="C++11">
<dl>
<dt>(1) empty container constructors (default constructor)</dt>
<dd>Constructs an <a href="/set::empty">empty</a> container, with no elements.</dd>
<dt>(2) range constructor</dt>
<dd>Constructs a container with as many elements as the range <tt>[first,last)</tt>, with each element <i>emplace-constructed</i> from its corresponding element in that range.</dd>
<dt>(3) copy constructor (and copying with allocator)</dt>
<dd>Constructs a container with a copy of each of the elements in <i>x</i>.</dd>
<dt>(4) move constructor (and moving with allocator)</dt>
<dd>Constructs a container that acquires the elements of <i>x</i>.<br>
If <i>alloc</i> is specified and is different from <i>x</i>'s allocator, the elements are moved. Otherwise, no elements are constructed (their ownership is directly transferred).<br>
<i>x</i> is left in an unspecified but valid state.</dd>
<dt>(5) initializer list constructor</dt>
<dd>Constructs a container with a copy of each of the elements in <i>il</i>.</dd>
</dl>
<br>
The container keeps an internal copy of <i>alloc</i>, which is used to allocate and deallocate storage for its elements, and to construct and destroy them (as specified by its <a href="/allocator_traits">allocator_traits</a>). If no <var>alloc</var> argument is passed to the constructor, a default-constructed allocator is used, except in the following cases:<br>
- The copy constructor <i>(3, first signature)</i> creates a container that keeps and uses a copy of the allocator returned by calling the appropriate <a href="/allocator_traits::select_on_container_copy_construction">selected_on_container_copy_construction</a> trait on <i>x</i>'s allocator.<br>
- The move constructor <i>(4, first signature)</i> acquires <i>x</i>'s allocator.<br>
<br>
The container also keeps an internal copy of <i>comp</i> (or <i>x</i>'s <a href="/set::key_comp">comparison object</a>), which is used to establish the order of the elements in the container and to check for equivalent elements.<br>
<br>
All elements are <i>copied</i>, <i>moved</i> or otherwise <i>constructed</i> by calling <a href="/allocator_traits::construct">allocator_traits::construct</a> with the appropriate arguments.<br>
</div>
</div>
<br>
The elements are sorted according to the <a href="/set::key_comp">comparison object</a>. If more than one equivalent element is passed to the constructor, only the first one is preserved.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>comp</dt>
<dd>Binary predicate that, taking two values of the same type of those contained in the <a href="/set">set</a>, returns <tt>true</tt> if the first argument goes before the second argument in the <i>strict weak ordering</i> it defines, and <tt>false</tt> otherwise.<br>
This shall be a function pointer or a function object.<br>
Member type <tt>key_compare</tt> is the internal comparison object type used by the container, defined in <a href="/set">set</a> as an alias of its second template parameter (<tt>Compare</tt>).<br>
If <tt>key_compare</tt> uses the default <a href="/less">less</a> (which has no state), this parameter is not relevant.</dd>
<dt>alloc</dt>
<dd>Allocator object.<br>
The container keeps and uses an internal copy of this allocator.<br>
Member type <tt>allocator_type</tt> is the internal allocator type used by the container, defined in <a href="/set">set</a> as an alias of its third template parameter (<tt>Alloc</tt>).<br>
If <tt>allocator_type</tt> is an instantiation of the default <a href="/allocator">allocator</a> (which has no state), this parameter is not relevant.</dd>
<dt>first, last</dt>
<dd><a href="/InputIterator">Input iterators</a> to the initial and final positions in a range. The range used is <tt>[first,last)</tt>, which includes all the elements between <i>first</i> and <i>last</i>, including the element pointed by <i>first</i> but not the element pointed by <i>last</i>.<br>
The function template argument <tt>InputIterator</tt> shall be an <a href="/InputIterator">input iterator</a> type that points to elements of a type from which <tt>value_type</tt> objects can be constructed.</dd>
<dt>x</dt>
<dd>Another <a href="/set">set</a> object of the same type (with the same class template arguments <tt>T</tt>, <tt>Compare</tt> and <tt>Alloc</tt>), whose contents are either copied or acquired.<br>
</dd>
<dt>il</dt>
<dd>An <a href="/initializer_list">initializer_list</a> object.<br>
These objects are automatically constructed from <i>initializer list</i> declarators.<br>
Member type <tt>value_type</tt> is the type of the elements in the container, defined in <a href="/set">set</a> as an alias of its first template parameter (<tt>T</tt>).</dd>
</dl>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></code></pre></td>
<td class="source"><pre><code><cite>// constructing sets</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;set&gt;</dfn>

<var>bool</var> fncomp (<var>int</var> lhs, <var>int</var> rhs) {<var>return</var> lhs&lt;rhs;}

<var>struct</var> classcomp {
  <var>bool</var> <var>operator</var>() (<var>const</var> <var>int</var>&amp; lhs, <var>const</var> <var>int</var>&amp; rhs) <var>const</var>
  {<var>return</var> lhs&lt;rhs;}
};

<var>int</var> main ()
{
  std::set&lt;<var>int</var>&gt; first;                           <cite>// empty set of ints</cite>

  <var>int</var> myints[]= {10,20,30,40,50};
  std::set&lt;<var>int</var>&gt; second (myints,myints+5);        <cite>// range</cite>

  std::set&lt;<var>int</var>&gt; third (second);                  <cite>// a copy of second</cite>

  std::set&lt;<var>int</var>&gt; fourth (second.begin(), second.end());  <cite>// iterator ctor.</cite>

  std::set&lt;<var>int</var>,classcomp&gt; fifth;                 <cite>// class as Compare</cite>

  <var>bool</var>(*fn_pt)(<var>int</var>,<var>int</var>) = fncomp;
  std::set&lt;<var>int</var>,<var>bool</var>(*)(<var>int</var>,<var>int</var>)&gt; sixth (fn_pt);  <cite>// function pointer as Compare</cite>

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The code does not produce any output, but demonstrates some ways in which a <a href="/set">set</a> container can be constructed.<br>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant for the <i>empty constructors (1)</i>, and for the <i>move constructors (4)</i> (unless <i>alloc</i> is different from <i>x</i>'s allocator).<br>
For all other cases, linear in the distance between the iterators (copy constructions) if the elements are already sorted according to the same criterion. For unsorted sequences, linearithmic (<tt>N*logN</tt>) in that distance (sorting,copy constructions).<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
The <i>move constructors</i> (4), invalidate all iterators, pointers and references related to <i>x</i> if the elements are moved.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
All copied elements are accessed.<br>
The <i>move constructors (4)</i> modify <i>x</i>.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> no effects in case an exception is thrown.<br>
If <a href="/allocator_traits::construct">allocator_traits::construct</a> is not supported with the appropriate arguments for the element constructions, or if the range specified by <tt>[first,last)</tt> is not valid, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/set/set/operator=/"><b>set::operator=</b></a></dt><dd>Copy container content <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/clear/"><b>set::clear</b></a></dt><dd>Clear content <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/set/set/insert/"><b>set::insert</b></a></dt><dd>Insert element <span class="typ">(public member function)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
<script type="text/javascript">
    google_ad_client = "ca-pub-1444228343479937";
    google_ad_slot = "9701143201";
    google_ad_width = 728;
    google_ad_height = 90;
</script>
<!-- leaderboard -->
<script type="text/javascript"
src="//pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="/">C++</a></b></h3>
<ul>
<li class="folder info"><a href="/info/">Information</a></li>
<li class="folder doc"><a href="/doc/">Tutorials</a></li>
<li class="folder selected reference"><a href="/reference/">Reference</a></li>
<li class="folder articles"><a href="/articles/">Articles</a></li>
<li class="folder forum"><a href="/forum/">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="/reference/">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="/reference/clibrary/">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cassert/"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cctype/"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cerrno/"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cfenv/"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cfloat/"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cinttypes/"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ciso646/"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/climits/"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/clocale/"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cmath/"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csetjmp/"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csignal/"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdarg/"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cstdbool/"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstddef/"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cstdint/"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdio/"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdlib/"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstring/"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/ctgmath/"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ctime/"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cuchar/"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwchar/"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwctype/"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="/reference/stl/">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/array/"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/deque/"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/forward_list/"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/list/"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/map/"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/queue/"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="/reference/set/"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stack/"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_map/"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_set/"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/vector/"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/iolibrary/">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/fstream/"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iomanip/"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ios/"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iosfwd/"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iostream/"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/istream/"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ostream/"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/sstream/"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/streambuf/"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/multithreading/">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/atomic/"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/condition_variable/"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/future/"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/thread/"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/std/">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/algorithm/"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/bitset/"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/chrono/"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/codecvt/"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/complex/"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/exception/"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/functional/"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/initializer_list/"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iterator/"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/limits/"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/locale/"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/memory/"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/new/"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/numeric/"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/random/"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/ratio/"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/regex/"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stdexcept/"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/string/"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/system_error/"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/tuple/"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/typeindex/"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/typeinfo/"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/type_traits/"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/utility/"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/valarray/"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="set_box">
<h3><b><a href="/reference/set/">&lt;set&gt;</a></b></h3>
<ul>
<li class="cpp98 cpp11 folder"><a href="/reference/set/multiset/"><span>multiset</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="/reference/set/set/"><span>set</span></a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="set_box">
<h3><b><a href="/reference/set/set/">set</a></b></h3>
<ul>
<li class="cpp98 cpp11 selected"><a href="/reference/set/set/set/"><span>set::set</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/~set/"><span>set::~set</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp98 cpp11"><a href="/reference/set/set/begin/"><span>set::begin</span></a></li>
<li class="cpp11"><a href="/reference/set/set/cbegin/"><span>set::cbegin</span></a></li>
<li class="cpp11"><a href="/reference/set/set/cend/"><span>set::cend</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/clear/"><span>set::clear</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/count/"><span>set::count</span></a></li>
<li class="cpp11"><a href="/reference/set/set/crbegin/"><span>set::crbegin</span></a></li>
<li class="cpp11"><a href="/reference/set/set/crend/"><span>set::crend</span></a></li>
<li class="cpp11"><a href="/reference/set/set/emplace/"><span>set::emplace</span></a></li>
<li class="cpp11"><a href="/reference/set/set/emplace_hint/"><span>set::emplace_hint</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/empty/"><span>set::empty</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/end/"><span>set::end</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/equal_range/"><span>set::equal_range</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/erase/"><span>set::erase</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/find/"><span>set::find</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/get_allocator/"><span>set::get_allocator</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/insert/"><span>set::insert</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/key_comp/"><span>set::key_comp</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/lower_bound/"><span>set::lower_bound</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/max_size/"><span>set::max_size</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/operator=/"><span>set::operator=</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/rbegin/"><span>set::rbegin</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/rend/"><span>set::rend</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/size/"><span>set::size</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/swap/"><span>set::swap</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/upper_bound/"><span>set::upper_bound</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/value_comp/"><span>set::value_comp</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>non-member overloads:</h4><ul>
<li class="cpp98 cpp11"><a href="/reference/set/set/operators/"><span>relational operators (set)</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/set/set/swap-free/"><span>swap (set)</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="/">Home page</a> | <a href="/privacy.do">Privacy policy</a><br>&copy; cplusplus.com, 2000-2016 - All rights reserved - <i>v3.1</i><br><a href="/contact.do?referrer=www.cplusplus.com%2Freference%2Fset%2Fset%2Fset%2F">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','/reference/edit.cgi?a=set+set+set'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='/reference/delete.cgi?a=set+set+set'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>