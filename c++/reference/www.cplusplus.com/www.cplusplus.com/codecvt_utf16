<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>codecvt_utf16 - C++ Reference</title>
<link rel="canonical" href="http://www.cplusplus.com/reference/codecvt/codecvt_utf16/">
<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
<link rel="stylesheet" type="text/css" href="/v321/main.css">
<script src="/v321/main.js" type="text/javascript"></script>
<script type='text/javascript'>
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
(function() {
var gads = document.createElement('script');
gads.async = true;
gads.type = 'text/javascript';
var useSSL = 'https:' == document.location.protocol;
gads.src = (useSSL ? 'https:' : 'http:') + 
'//www.googletagservices.com/tag/js/gpt.js';
var node = document.getElementsByTagName('script')[0];
node.parentNode.insertBefore(gads, node);
})();
</script>

<script type='text/javascript'>
googletag.cmd.push(function() {
googletag.defineSlot('/32882001/L', [728, 90], 'div-gpt-ad-1427191279638-0').addService(googletag.pubads());
googletag.enableServices();
});
</script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="/" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="/reference/">Reference</a></li>
<li><a href="/reference/codecvt/">&lt;codecvt&gt;</a></li>
<li class="here">codecvt_utf16</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support">
<div id='div-gpt-ad-1427191279638-0' style='width:728px; height:90px;'>
<script type='text/javascript'>
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1427191279638-0'); });
</script>
</div>
</div>
<div id="I_content">
<div class="C_doc">
<div id="I_type">class template</div>
<div id="I_file">&lt;codecvt&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>codecvt_utf16<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt; class Elem, unsigned long MaxCode = 0x10ffffUL, codecvt_mode Mode = (codecvt_mode)0 &gt;  class codecvt_utf16 : public codecvt &lt;Elem, char, mbstate_t&gt;</pre></div><div id="I_description">Convert UTF-16</div>
<section id="description">
<div class="hierarchy">
<ul>
<li><b><a href="/locale::facet">locale::facet</a></b><b><a href="/codecvt_base">codecvt_base</a></b></li>
<li><b><a href="/codecvt">codecvt</a></b></li>
<li><b>codecvt_utf16</b></li>
</ul>
</div>
<br>
Converts between multibyte sequences encoded in UTF-16 and sequences of their equivalent fixed-width characters of type <i>Elem</i> (either UCS-2 or UCS-4).<br>
<br>
Notice that if <i>Elem</i> is a 32bit-width character type (such as <tt>char32_t</tt>), and <i>MaxCode</i> is <tt>0x10ffff</tt>, the conversion performed is between UTF-16 and UTF-32. To convert between UTF-16 and UTF-8, see <a href="/codecvt_utf8_utf16">codecvt_utf8_utf16</a>.<br>
<br>
The facet uses <i>Elem</i> as its <i>internal character type</i>, and <tt>char</tt> as its <i>external character type</i> (encoded as UTF-16). Therefore:<br>
<ul>
<li><a href="/codecvt::in">Member in</a> converts from UTF-16 to its fixed-width character equivalent.</li>
<li><a href="/codecvt::out">Member out</a> converts from the fixed-width wide character encoding to UTF-16.</li>
</ul>
</section>
<br>
<section id="parameters">
<h3>Template parameters</h3>
<dl>
<dt>Elem</dt>
<dd>The <i>internal character type</i>, aliased as member <tt>intern_type</tt>. This shall be a wide character type: <tt>wchar_t</tt>, <tt>char16_t</tt> or <tt>char32_t</tt>.<br>
For 16bit-wide characters, <a href="/codecvt::in">conversions in</a> of characters outside the <i>Basic Multilingual Plane</i> may cause conversion errors.<br>
The <i>external character type</i> in this facet is always <tt>char</tt>.</dd>
<dt>MaxCode</dt>
<dd>The largest code point that will be translated without reporting a conversion error.</dd>
<dt>Mode</dt>
<dd>Bitmask value of type <a href="/codecvt_mode">codecvt_mode</a>:<br>
<table class="boxed">
<tr><th>label</th><th>value</th><th>description</th></tr>
<tr><td><tt>consume_header</tt></td><td><tt>4</tt></td><td>An optional initial header sequence (BOM) is read to determine whether a multibyte sequence <a href="/codecvt::in">converted in</a> is big-endian or little-endian.</td></tr>
<tr><td><tt>generate_header</tt></td><td><tt>2</tt></td><td>An initial header sequence (BOM) shall be generated to indicate whether a multibyte sequence <a href="/codecvt::out">converted out</a> is big-endian or little-endian.</td></tr>
<tr><td><tt>little_endian</tt></td><td><tt>1</tt></td><td>The multibyte sequence generated on <a href="/codecvt::out">conversions out</a> shall be little-endian (as opposed to the default big-endian).</td></tr>
</table>
</dd>
</dl>
</section>
<br>
<section id="types">
<h3>Member types</h3>
The following aliases are member types of <tt>codecvt_utf16</tt>, inherited from <a href="/codecvt">codecvt</a>:<br>
<br>
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>intern_type</tt></td><td>The first template parameter (<tt>Elem</tt>)</td><td>The internal character type (wide character type).</td></tr>
<tr><td><tt>extern_type</tt></td><td><tt>char</tt></td><td>The external character type (multibyte character type).</td></tr>
<tr><td><tt>state_type</tt></td><td><tt>mbstate_t</tt></td><td>Conversion state type (see <a href="/mbstate_t">mbstate_t</a>).</td></tr>
<tr><td><tt><a href="/codecvt_base">result</a></tt></td><td><tt><a href="/codecvt_base">codecvt_base::result</a></tt></td><td>Enum type with the result of a conversion operation (see <a href="/codecvt_base">codecvt_base::result</a>).</td></tr>
</table>
</section>
<br>
<section id="functions">
<h3>Public member functions inherited from <a href="/codecvt">codecvt</a></h3>
<dl class="links"><dt><a href= "/reference/locale/codecvt/codecvt/"><b>(constructor)</b></a></dt><dd>codecvt constructor <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Conversion functions</b>:<br>
<dl class="links"><dt><a href= "/reference/locale/codecvt/in/"><b>in</b></a></dt><dd>Translate in characters <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/locale/codecvt/out/"><b>out</b></a></dt><dd>Translate out characters <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/locale/codecvt/unshift/"><b>unshift</b></a></dt><dd>Unshift translation state <span class="typ">(public member function)</span></dd></dl>
<br>
<b>Character encoding properties</b>:<br>
<dl class="links"><dt><a href= "/reference/locale/codecvt/always_noconv/"><b>always_noconv</b></a></dt><dd>Return noconv characteristics <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/locale/codecvt/encoding/"><b>encoding</b></a></dt><dd>Return encoding width <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/locale/codecvt/length/"><b>length</b></a></dt><dd>Return length of translated sequence <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/locale/codecvt/max_length/"><b>max_length</b></a></dt><dd>Return max length of one character <span class="typ">(public member function)</span></dd></dl>
<br>
<h3>Virtual protected member functions</h3>
The class defines its functionality through its virtual protected member functions:<br>
<table class="boxed">
<tr><th>member function</th><th>behavior in <tt>codecvt_utf16</tt></th></tr>
<tr><td><tt><a href="/codecvt::do_always_noconv">do_always_no_conv</a></tt></td><td>Returns <tt>0</tt> (not all conversions will yield a <a href="/codecvt::result">noconv result</a>).</td></tr>
<tr><td><tt><a href="/codecvt::do_encoding">do_encoding</a></tt></td><td>Returns <tt>0</tt> (the external encoding is not fixed-width).</td></tr>
<tr><td><tt><a href="/codecvt::do_in">do_in</a></tt></td><td>Converts from UTF-16 to the fixed-width equivalent of type <tt>Elem</tt>.</td></tr>
<tr><td><tt><a href="/codecvt::do_length">do_length</a></tt></td><td>Returns length (for <a href="/codecvt::length">codecvt::length</a>).</td></tr>
<tr><td><tt><a href="/codecvt::do_max_length">do_max_length</a></tt></td><td>Returns the maximum length (in bytes) of a code point.</td></tr>
<tr><td><tt><a href="/codecvt::do_out">do_out</a></tt></td><td>Converts from the fixed-width wide character encoding (UCS-2 / UCS-4) to UTF-16.</td></tr>
<tr><td><tt><a href="/codecvt::do_unshift">do_unshift</a></tt></td><td>Brings the <a href="/mbstate_t">mbstate_t</a> object to an initial state.</td></tr>
<tr><td><tt><a href="/codecvt::~codecvt">(destructor)</a></tt></td><td>Releases resources.</td></tr>
</table>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br></code></pre></td>
<td class="source"><pre><code><cite>// codecvt_utf16: writing UTF-32 string as UTF-16</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;locale&gt;</dfn>
<dfn>#include &lt;string&gt;</dfn>
<dfn>#include &lt;codecvt&gt;</dfn>
<dfn>#include &lt;fstream&gt;</dfn>

<var>int</var> main ()
{
  std::u32string str ( U<kbd>"\U00004f60\U0000597d"</kbd> );  <cite>// ni hao (你好)</cite>

  std::locale loc (std::locale(), <var>new</var> std::codecvt_utf16&lt;<var>char32_t</var>&gt;);
  std::basic_ofstream&lt;<var>char32_t</var>&gt; ofs (<kbd>"test.txt"</kbd>);
  ofs.imbue(loc);

  std::cout &lt;&lt; <kbd>"Writing to file (UTF-16)... "</kbd>;
  ofs &lt;&lt; str;
  std::cout &lt;&lt; <kbd>"done!\n"</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Output<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>Writing to file (UTF-16)... done!
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/locale/codecvt/"><b>codecvt</b></a></dt><dd>Convert codeset facet <span class="typ">(class template)</span></dd></dl><dl class="links"><dt><a href= "/reference/codecvt/codecvt_utf8/"><b>codecvt_utf8</b></a></dt><dd>Convert UTF-8 <span class="typ">(class template)</span></dd></dl><dl class="links"><dt><a href= "/reference/codecvt/codecvt_utf8_utf16/"><b>codecvt_utf8_utf16</b></a></dt><dd>Convert between UTF-8 and UTF-16 <span class="typ">(class template)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="/">C++</a></b></h3>
<ul>
<li class="folder info"><a href="/info/">Information</a></li>
<li class="folder doc"><a href="/doc/">Tutorials</a></li>
<li class="folder selected reference"><a href="/reference/">Reference</a></li>
<li class="folder articles"><a href="/articles/">Articles</a></li>
<li class="folder forum"><a href="/forum/">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="/reference/">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="/reference/clibrary/">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cassert/"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cctype/"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cerrno/"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cfenv/"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cfloat/"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cinttypes/"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ciso646/"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/climits/"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/clocale/"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cmath/"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csetjmp/"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csignal/"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdarg/"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cstdbool/"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstddef/"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cstdint/"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdio/"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdlib/"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstring/"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/ctgmath/"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ctime/"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cuchar/"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwchar/"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwctype/"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/stl/">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/array/"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/deque/"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/forward_list/"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/list/"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/map/"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/queue/"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/set/"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stack/"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_map/"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_set/"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/vector/"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/iolibrary/">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/fstream/"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iomanip/"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ios/"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iosfwd/"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iostream/"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/istream/"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ostream/"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/sstream/"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/streambuf/"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/multithreading/">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/atomic/"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/condition_variable/"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/future/"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/thread/"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="/reference/std/">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/algorithm/"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/bitset/"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/chrono/"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 selected folder"><a href="/reference/codecvt/"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/complex/"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/exception/"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/functional/"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/initializer_list/"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iterator/"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/limits/"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/locale/"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/memory/"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/new/"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/numeric/"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/random/"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/ratio/"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/regex/"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stdexcept/"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/string/"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/system_error/"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/tuple/"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/typeindex/"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/typeinfo/"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/type_traits/"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/utility/"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/valarray/"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="codecvt_box">
<h3><b><a href="/reference/codecvt/">&lt;codecvt&gt;</a></b></h3>
<ul>
<li class="C_Collapsable"><h4>classes:</h4><ul>
<li class="cpp11 selected"><a href="/reference/codecvt/codecvt_utf16/"><span>codecvt_utf16</span></a></li>
<li class="cpp11"><a href="/reference/codecvt/codecvt_utf8/"><span>codecvt_utf8</span></a></li>
<li class="cpp11"><a href="/reference/codecvt/codecvt_utf8_utf16/"><span>codecvt_utf8_utf16</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>enum:</h4><ul>
<li class="cpp11"><a href="/reference/codecvt/codecvt_mode/"><span>codecvt_mode</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="/">Home page</a> | <a href="/privacy.do">Privacy policy</a><br>&copy; cplusplus.com, 2000-2016 - All rights reserved - <i>v3.1</i><br><a href="/contact.do?referrer=www.cplusplus.com%2Freference%2Fcodecvt%2Fcodecvt_utf16%2F">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','/reference/edit.cgi?a=codecvt+codecvt_utf16'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='/reference/delete.cgi?a=codecvt+codecvt_utf16'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>