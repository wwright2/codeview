<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>shared_ptr - C++ Reference</title>
<link rel="canonical" href="http://www.cplusplus.com/reference/memory/shared_ptr/">
<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
<link rel="stylesheet" type="text/css" href="/v321/main.css">
<script src="/v321/main.js" type="text/javascript"></script>
<script type='text/javascript'>
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
(function() {
var gads = document.createElement('script');
gads.async = true;
gads.type = 'text/javascript';
var useSSL = 'https:' == document.location.protocol;
gads.src = (useSSL ? 'https:' : 'http:') + 
'//www.googletagservices.com/tag/js/gpt.js';
var node = document.getElementsByTagName('script')[0];
node.parentNode.insertBefore(gads, node);
})();
</script>

<script type='text/javascript'>
googletag.cmd.push(function() {
googletag.defineSlot('/32882001/L', [728, 90], 'div-gpt-ad-1427191279638-0').addService(googletag.pubads());
googletag.enableServices();
});
</script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="/" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="/reference/">Reference</a></li>
<li><a href="/reference/memory/">&lt;memory&gt;</a></li>
<li class="here">shared_ptr</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support">
<div id='div-gpt-ad-1427191279638-0' style='width:728px; height:90px;'>
<script type='text/javascript'>
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1427191279638-0'); });
</script>
</div>
</div>
<div id="I_content">
<div class="C_doc">
<div id="I_type">class template</div>
<div id="I_file">&lt;memory&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>shared_ptr<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt;class T&gt; class shared_ptr;</pre></div><div id="I_description">Shared pointer</div>
<section id="description">
Manages the storage of a pointer, providing a limited <i>garbage-collection</i> facility, possibly sharing that management with other objects.<br>
<br>
Objects of <tt>shared_ptr</tt> types have the ability of <i>taking ownership</i> of a pointer and <i>share</i> that ownership: once they take ownership, the group of owners of a pointer become responsible for its deletion when the last one of them releases that ownership.<br>
<br>
<tt>shared_ptr</tt> objects release ownership on the object they <i>co-own</i> as soon as they themselves are destroyed, or as soon as their value changes either by an <a href="/shared_ptr::operator=">assignment operation</a> or by an explicit call to <a href="/shared_ptr::reset">shared_ptr::reset</a>. Once all <tt>shared_ptr</tt> objects that share ownership over a pointer have released this ownership, the managed object is deleted (normally by calling <tt>::delete</tt>, but a different <i>deleter</i> may be specified on <a href="/shared_ptr::shared_ptr">construction</a>).<br>
<br>
<tt>shared_ptr</tt> objects can only share ownership by copying their value: If two <tt>shared_ptr</tt> are constructed (or <a href="/make_shared">made</a>) from the same (non-<tt>shared_ptr</tt>) pointer, they will both be owning the pointer without sharing it, causing potential access problems when one of them releases it (deleting its managed object) and leaving the other pointing to an invalid location.<br>
<br>
Additionally, <tt>shared_ptr</tt> objects can share ownership over a pointer while at the same time pointing to another object. This ability is known as <i>aliasing</i> (see <a href="/shared_ptr::shared_ptr">constructors</a>), and is commonly used to point to member objects while owning the object they belong to. Because of this, a <tt>shared_ptr</tt> may relate to two pointers:<br>
<br>
<ul>
<li>A <a href="/shared_ptr::get">stored pointer</a>, which is the pointer it is said to <i>point to</i>, and the one it <a href="/shared_ptr::operator*">dereferences</a> with <a href="/shared_ptr::operator*">operator*</a>.</li>
<li>An <i>owned pointer</i> (possibly shared), which is the pointer the ownership group is in charge of deleting at some point, and for which it <a href="/shared_ptr::use_count">counts as a use</a>.</li>
</ul>
<br>
Generally, the <i>stored pointer</i> and the <i>owned pointer</i> refer to the same object, but alias <tt>shared_ptr</tt> objects (those constructed with the alias <a href="/shared_ptr::shared_ptr">constructor</a> and their copies) may refer to different objects.<br>
<br>
A <tt>shared_ptr</tt> that does not own any pointer is called an <i>empty</i> <tt>shared_ptr</tt>. A <tt>shared_ptr</tt> that points to no object is called a <i>null</i> <tt>shared_ptr</tt> and shall not be <a href="/shared_ptr::operator*">dereferenced</a>. Notice though that an <i>empty</i> <tt>shared_ptr</tt> is not necessarily a <i>null</i> <tt>shared_ptr</tt>, and a <i>null</i> <tt>shared_ptr</tt> is not necessarily an <i>empty</i> <tt>shared_ptr</tt>.<br>
<br>
<tt>shared_ptr</tt> objects replicate a limited pointer functionality by providing access to the object they point to through operators <tt>*</tt> and <tt>-&gt;</tt>. For safety reasons, they do not support pointer arithmetics.<br>
<br>
A related class, <a href="/weak_ptr">weak_ptr</a>, is able to <i>share</i> pointers with <a href="/shared_ptr">shared_ptr</a> objects without <i>owning</i> them.<br>
</section>
<br>
<section id="parameters">
<h3>Template parameters</h3>
<dl>
<dt>T</dt>
<dd>The type of the managed object, aliased as member type <tt>element_type</tt>.</dd>
</dl>
</section>
<br>
<section id="types">
<h3>Member types</h3>
The following alias is a member type of <tt>shared_ptr</tt>.<br>
<br>
<table class="boxed">
<tr><th>member type</th><th>definition</th><th>notes</th></tr>
<tr><td><tt>element_type</tt></td><td>Template parameter (<tt>T</tt>)</td><td>The type of the managed object</td></tr>
</table>
</section>
<br>
<section id="functions">
<h3>Member functions</h3>
<dl class="links"><dt><a href= "/reference/memory/shared_ptr/shared_ptr/"><b>(constructor)</b></a></dt><dd>Construct shared_ptr <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/shared_ptr/~shared_ptr/"><b>(destructor)</b></a></dt><dd>Destroy shared_ptr <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/shared_ptr/operator=/"><b>operator=</b></a></dt><dd>shared_ptr assignment <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/shared_ptr/swap/"><b>swap</b></a></dt><dd>Swap content <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/shared_ptr/reset/"><b>reset</b></a></dt><dd>Reset pointer <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/shared_ptr/get/"><b>get</b></a></dt><dd>Get pointer <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/shared_ptr/operator*/"><b>operator*</b></a></dt><dd>Dereference object <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/shared_ptr/operator->/"><b>operator-&gt;</b></a></dt><dd>Dereference object member <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/shared_ptr/use_count/"><b>use_count</b></a></dt><dd>Use count <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/shared_ptr/unique/"><b>unique</b></a></dt><dd>Check if unique <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/shared_ptr/operator bool/"><b>operator bool</b></a></dt><dd>Check if not null <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/shared_ptr/owner_before/"><b>owner_before</b></a></dt><dd>Owner-based ordering <span class="typ">(public member function template)</span></dd></dl>
<br>
<h3>Non-member functions</h3>
<b>Overloads</b>:<br>
<dl class="links"><dt><a href= "/reference/memory/shared_ptr/swap-free/"><b>swap</b></a></dt><dd>Exchange content of shared_ptr objects <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/shared_ptr/operators/"><b>relational operators</b></a></dt><dd>Relational operators ==, !=, <, <=, >, >= <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/shared_ptr/operator<</"><b>ostream operator&lt;&lt;</b></a></dt><dd>Insert into output stream <span class="typ">(function template)</span></dd></dl>
<br>
<b>Specific functions</b>:<br>
<dl class="links"><dt><a href= "/reference/memory/make_shared/"><b>make_shared</b></a></dt><dd>Make shared_ptr <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/allocate_shared/"><b>allocate_shared</b></a></dt><dd>Allocate shared_ptr <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/static_pointer_cast/"><b>static_pointer_cast</b></a></dt><dd>Static cast of shared_ptr <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/dynamic_pointer_cast/"><b>dynamic_pointer_cast</b></a></dt><dd>Dynamic cast of shared_ptr <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/const_pointer_cast/"><b>const_pointer_cast</b></a></dt><dd>Const cast of shared_ptr <span class="typ">(function template)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/get_deleter/"><b>get_deleter</b></a></dt><dd>Get deleter from shared_ptr <span class="typ">(function template)</span></dd></dl>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/memory/weak_ptr/"><b>weak_ptr</b></a></dt><dd>Weak shared pointer <span class="typ">(class template)</span></dd></dl><dl class="links"><dt><a href= "/reference/memory/owner_less/"><b>owner_less</b></a></dt><dd>Owner-based less-than operation <span class="typ">(class template)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="/">C++</a></b></h3>
<ul>
<li class="folder info"><a href="/info/">Information</a></li>
<li class="folder doc"><a href="/doc/">Tutorials</a></li>
<li class="folder selected reference"><a href="/reference/">Reference</a></li>
<li class="folder articles"><a href="/articles/">Articles</a></li>
<li class="folder forum"><a href="/forum/">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="/reference/">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="/reference/clibrary/">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cassert/"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cctype/"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cerrno/"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cfenv/"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cfloat/"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cinttypes/"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ciso646/"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/climits/"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/clocale/"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cmath/"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csetjmp/"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csignal/"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdarg/"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cstdbool/"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstddef/"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cstdint/"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdio/"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdlib/"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstring/"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/ctgmath/"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ctime/"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cuchar/"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwchar/"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwctype/"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/stl/">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/array/"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/deque/"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/forward_list/"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/list/"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/map/"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/queue/"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/set/"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stack/"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_map/"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_set/"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/vector/"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/iolibrary/">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/fstream/"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iomanip/"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ios/"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iosfwd/"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iostream/"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/istream/"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ostream/"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/sstream/"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/streambuf/"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/multithreading/">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/atomic/"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/condition_variable/"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/future/"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/thread/"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="/reference/std/">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/algorithm/"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/bitset/"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/chrono/"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/codecvt/"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/complex/"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/exception/"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/functional/"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/initializer_list/"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iterator/"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/limits/"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/locale/"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="/reference/memory/"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/new/"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/numeric/"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/random/"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/ratio/"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/regex/"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stdexcept/"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/string/"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/system_error/"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/tuple/"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/typeindex/"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/typeinfo/"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/type_traits/"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/utility/"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/valarray/"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="memory_box">
<h3><b><a href="/reference/memory/">&lt;memory&gt;</a></b></h3>
<ul>
<li class="C_Collapsable"><h4>classes:</h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/memory/allocator/"><span>allocator</span></a></li>
<li class="cpp11"><a href="/reference/memory/allocator_arg_t/"><span>allocator_arg_t</span></a></li>
<li class="cpp11 folder"><a href="/reference/memory/allocator_traits/"><span>allocator_traits</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/memory/auto_ptr/"><span>auto_ptr</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/memory/auto_ptr_ref/"><span>auto_ptr_ref</span></a></li>
<li class="cpp11 folder"><a href="/reference/memory/bad_weak_ptr/"><span>bad_weak_ptr</span></a></li>
<li class="cpp11 folder"><a href="/reference/memory/default_delete/"><span>default_delete</span></a></li>
<li class="cpp11 folder"><a href="/reference/memory/enable_shared_from_this/"><span>enable_shared_from_this</span></a></li>
<li class="cpp11"><a href="/reference/memory/owner_less/"><span>owner_less</span></a></li>
<li class="cpp11 folder"><a href="/reference/memory/pointer_traits/"><span>pointer_traits</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/memory/raw_storage_iterator/"><span>raw_storage_iterator</span></a></li>
<li class="cpp11 selected folder"><a href="/reference/memory/shared_ptr/"><span>shared_ptr</span></a></li>
<li class="cpp11 folder"><a href="/reference/memory/unique_ptr/"><span>unique_ptr</span></a></li>
<li class="cpp11"><a href="/reference/memory/uses_allocator/"><span>uses_allocator</span></a></li>
<li class="cpp11 folder"><a href="/reference/memory/weak_ptr/"><span>weak_ptr</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>enum classes:</h4><ul>
<li class="cpp11"><a href="/reference/memory/pointer_safety/"><span>pointer_safety</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>functions:</h4><ul>
<li class="cpp11"><a href="/reference/memory/addressof/"><span>addressof</span></a></li>
<li class="cpp11"><a href="/reference/memory/align/"><span>align</span></a></li>
<li class="cpp11"><a href="/reference/memory/allocate_shared/"><span>allocate_shared</span></a></li>
<li class="cpp11"><a href="/reference/memory/const_pointer_cast/"><span>const_pointer_cast</span></a></li>
<li class="cpp11"><a href="/reference/memory/declare_no_pointers/"><span>declare_no_pointers</span></a></li>
<li class="cpp11"><a href="/reference/memory/declare_reachable/"><span>declare_reachable</span></a></li>
<li class="cpp11"><a href="/reference/memory/dynamic_pointer_cast/"><span>dynamic_pointer_cast</span></a></li>
<li class="cpp11"><a href="/reference/memory/get_deleter/"><span>get_deleter</span></a></li>
<li class="cpp11"><a href="/reference/memory/get_pointer_safety/"><span>get_pointer_safety</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/memory/get_temporary_buffer/"><span>get_temporary_buffer</span></a></li>
<li class="cpp11"><a href="/reference/memory/make_shared/"><span>make_shared</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/memory/return_temporary_buffer/"><span>return_temporary_buffer</span></a></li>
<li class="cpp11"><a href="/reference/memory/static_pointer_cast/"><span>static_pointer_cast</span></a></li>
<li class="cpp11"><a href="/reference/memory/undeclare_no_pointers/"><span>undeclare_no_pointers</span></a></li>
<li class="cpp11"><a href="/reference/memory/undeclare_reachable/"><span>undeclare_reachable</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/memory/uninitialized_copy/"><span>uninitialized_copy</span></a></li>
<li class="cpp11"><a href="/reference/memory/uninitialized_copy_n/"><span>uninitialized_copy_n</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/memory/uninitialized_fill/"><span>uninitialized_fill</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/memory/uninitialized_fill_n/"><span>uninitialized_fill_n</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>objects:</h4><ul>
<li class="cpp11"><a href="/reference/memory/allocator_arg/"><span>allocator_arg</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="shared_ptr_box">
<h3><b><a href="/reference/memory/shared_ptr/">shared_ptr</a></b></h3>
<ul>
<li class="cpp11"><a href="/reference/memory/shared_ptr/shared_ptr/"><span>shared_ptr::shared_ptr</span></a></li>
<li class="cpp11"><a href="/reference/memory/shared_ptr/~shared_ptr/"><span>shared_ptr::~shared_ptr</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp11"><a href="/reference/memory/shared_ptr/get/"><span>shared_ptr::get</span></a></li>
<li class="cpp11"><a href="/reference/memory/shared_ptr/operator bool/"><span>shared_ptr::operator bool</span></a></li>
<li class="cpp11"><a href="/reference/memory/shared_ptr/operator*/"><span>shared_ptr::operator*</span></a></li>
<li class="cpp11"><a href="/reference/memory/shared_ptr/operator->/"><span>shared_ptr::operator-&gt;</span></a></li>
<li class="cpp11"><a href="/reference/memory/shared_ptr/operator=/"><span>shared_ptr::operator=</span></a></li>
<li class="cpp11"><a href="/reference/memory/shared_ptr/owner_before/"><span>shared_ptr::owner_before</span></a></li>
<li class="cpp11"><a href="/reference/memory/shared_ptr/reset/"><span>shared_ptr::reset</span></a></li>
<li class="cpp11"><a href="/reference/memory/shared_ptr/swap/"><span>shared_ptr::swap</span></a></li>
<li class="cpp11"><a href="/reference/memory/shared_ptr/unique/"><span>shared_ptr::unique</span></a></li>
<li class="cpp11"><a href="/reference/memory/shared_ptr/use_count/"><span>shared_ptr::use_count</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>non-member overloads:</h4><ul>
<li class="cpp11"><a href="/reference/memory/shared_ptr/operator<</"><span>operator&lt;&lt; (shared_ptr)</span></a></li>
<li class="cpp11"><a href="/reference/memory/shared_ptr/operators/"><span>relational operators (shared_ptr)</span></a></li>
<li class="cpp11"><a href="/reference/memory/shared_ptr/swap-free/"><span>swap (shared_ptr)</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="/">Home page</a> | <a href="/privacy.do">Privacy policy</a><br>&copy; cplusplus.com, 2000-2016 - All rights reserved - <i>v3.1</i><br><a href="/contact.do?referrer=www.cplusplus.com%2Freference%2Fmemory%2Fshared_ptr%2F">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			el.appendChild(btn('New Page','New Page','new','/reference/new.cgi?a=memory+shared_ptr'));
			el.appendChild(btn('Edit Page','Edit Page','edit','/reference/edit.cgi?a=memory+shared_ptr'));
			
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='/reference/delete.cgi?a=memory+shared_ptr'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>