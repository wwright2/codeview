<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>unique_lock::unique_lock - C++ Reference</title>
<link rel="canonical" href="http://www.cplusplus.com/reference/mutex/unique_lock/unique_lock/">
<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
<link rel="stylesheet" type="text/css" href="/v321/main.css">
<script src="/v321/main.js" type="text/javascript"></script>
<script type='text/javascript'>
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
(function() {
var gads = document.createElement('script');
gads.async = true;
gads.type = 'text/javascript';
var useSSL = 'https:' == document.location.protocol;
gads.src = (useSSL ? 'https:' : 'http:') + 
'//www.googletagservices.com/tag/js/gpt.js';
var node = document.getElementsByTagName('script')[0];
node.parentNode.insertBefore(gads, node);
})();
</script>

<script type='text/javascript'>
googletag.cmd.push(function() {
googletag.defineSlot('/32882001/L', [728, 90], 'div-gpt-ad-1427191279638-0').addService(googletag.pubads());
googletag.enableServices();
});
</script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="/" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="/reference/">Reference</a></li>
<li><a href="/reference/mutex/">&lt;mutex&gt;</a></li>
<li><a href="/reference/mutex/unique_lock/">unique_lock</a></li>
<li class="here">unique_lock</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support">
<div id='div-gpt-ad-1427191279638-0' style='width:728px; height:90px;'>
<script type='text/javascript'>
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1427191279638-0'); });
</script>
</div>
</div>
<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;mutex&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/mutex/unique_lock/">unique_lock</a>::unique_lock<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><table><tr class="odd"><th>default (1)</th><td><pre>unique_lock() noexcept;</pre></td></tr><tr class="even"><th>locking (2)</th><td><pre>explicit unique_lock (mutex_type&amp; m);</pre></td></tr><tr class="odd"><th>try-locking (3)</th><td><pre>unique_lock (mutex_type&amp; m, try_to_lock_t tag);</pre></td></tr><tr class="even"><th>deferred (4)</th><td><pre>unique_lock (mutex_type&amp; m, defer_lock_t tag) noexcept;</pre></td></tr><tr class="odd"><th>adopting (5)</th><td><pre>unique_lock (mutex_type&amp; m, adopt_lock_t tag);</pre></td></tr><tr class="even"><th>locking for (6)</th><td><pre>template &lt;class Rep, class Period&gt;unique_lock (mutex_type&amp; m, const chrono::duration&lt;Rep,Period&gt;&amp; rel_time);</pre></td></tr><tr class="odd"><th>locking until (7)</th><td><pre>template &lt;class Clock, class Duration&gt;unique_lock (mutex_type&amp; m, const chrono::time_point&lt;Clock,Duration&gt;&amp; abs_time);</pre></td></tr><tr class="even"><th>copy [deleted] (8)</th><td><pre>unique_lock (const unique_lock&amp;) = delete;</pre></td></tr><tr class="odd"><th>move (9)</th><td><pre>unique_lock (unique_lock&amp;&amp; x);</pre></td></tr></table></div><div id="I_description">Construct unique_lock</div>
<section id="description">
Constructs a <samp><a href="/unique_lock">unique_lock</a></samp>:<br>
<br>
<dl>
<dt>(1) default constructor</dt>
<dd>The object manages no <i><a href="/unique_lock::mutex">mutex object</a></i>.<br>
<dt>(2) locking initialization</dt>
<dd>The object manages <var>m</var>, and locks it (blocking, if necessary) by calling <code><a href="/mutex::lock">m.lock()</a></code>.</dd>
<dt>(3) try-locking initialization</dt>
<dd>The object manages <var>m</var>, and attempts to lock it (without blocking) by calling <code><a href="/mutex::try_lock">m.try_lock()</a></code>.</dd>
<dt>(4) deferred initialization</dt>
<dd>The object manages <var>m</var> without locking it. <var>m</var> shall be a <i>mutex object</i> that is not currently locked by the constructing thread.</dd>
<dt>(5) adopting initialization</dt>
<dd>The object manages <var>m</var>, which is a <i>mutex object</i> currently locked by the constructing thread (the object acquires <i><a href="/unique_lock::owns_lock">ownership</a></i> over the lock).</dd>
<dt>(6) locking for duration</dt>
<dd>The object manages <var>m</var>, and attempts to lock it during <var>rel_time</var> by calling <code>m.<a href="/timed_mutex::try_lock_for">try_lock_for</a>(rel_time)</code>.</dd>
<dt>(7) locking until time point</dt>
<dd>The object manages <var>m</var>, and attempts to lock it before <var>abs_time</var> by calling <code>m.<a href="/timed_mutex::try_lock_until">try_lock_until</a>(abs_time)</code>.</dd>
<dt>(8) copy construction [deleted]</dt>
<dd><samp><a href="/unique_lock">unique_lock</a></samp> objects cannot be copied (<i>copy constructor</i> deleted).</dd>
<dt>(9) move construction</dt>
<dd>The object acquires the mutex managed by <var>x</var>, including its current <i><a href="/unique_lock::owns_lock">owning state</a></i>.<br>
<var>x</var> is left in the same state as if <i>default-constructed</i> (referring to no <i><a href="/unique_lock::mutex">mutex object</a></i>).</dd>
</dl>
<br>
The object manages the state of a <i><a href="/unique_lock::mutex">mutex object</a></i> by keeping a reference to it and information on whether it <i><a href="/unique_lock::owns_lock">owns a lock</a></i> on it.<br>
<br>
Objects constructed with <i>(2)</i> and <i>(5)</i> always <i><a href="/unique_lock::owns_lock">own a lock</a></i> on the <i><a href="/unique_lock::mutex">mutex object</a></i>. Those with <i>(1)</i> and <i>(4)</i> never <i><a href="/unique_lock::owns_lock">own a lock</a></i>. For <i>(3)</i>, <i>(6)</i> and <i>(7)</i>, they <i><a href="/unique_lock::owns_lock">own a lock</a></i> if the locking attempt is successful.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>m</dt>
<dd><i>mutex object</i> to be managed by the <samp><a href="/unique_lock">unique_lock</a></samp> object.<br>
<samp>mutex_type</samp> is <samp><a href="/unique_lock">unique_lock</a></samp>'s template parameter (the type of the managed <i><a href="/unique_lock::mutex">mutex object</a></i>).</dd>
<dt>tag</dt>
<dd>This tag argument is merely used to select a specific constructor (values of these types have no state).<br>
It is one of the following values:<br>
<table class="boxed">
<tr><th>value</th><th>description</th></tr>
<tr><td><i>(no tag)</i></td><td>Lock on construction by calling member <samp><a href="/mutex::lock">lock</a></samp>.</td></tr>
<tr><td><samp><a href="/try_to_lock">try_to_lock</a></samp></td><td>Attempt to lock on construction by calling member <samp><a href="/mutex::try_lock">try_lock</a></samp></td></tr>
<tr><td><samp><a href="/defer_lock">defer_lock</a></samp></td><td>Do not lock on construction (and assume it is not already locked by thread)</td></tr>
<tr><td><samp><a href="/adopt_lock">adopt_lock</a></samp></td><td>Adopt current lock (assume it is already locked by thread).</td></tr>
</table>
<samp><a href="/try_to_lock_t">try_to_lock_t</a></samp>, <samp><a href="/defer_lock_t">defer_lock_t</a></samp> and <samp><a href="/adopt_lock_t">adopt_lock_t</a></samp> are the types of objects <samp><a href="/try_to_lock">try_to_lock</a></samp>, <samp><a href="/defer_lock">defer_lock</a></samp> and <samp><a href="/adopt_lock">adopt_lock</a></samp>, respectively.<br>
</dd>
<dt>rel_time</dt>
<dd>The maximum time span during which the thread could block waiting to acquire a lock. If exhausted, the object is initialized not <i><a href="/unique_lock::owns_lock">owning a lock</a></i>.<br>
<samp><a href="/duration">duration</a></samp> is an object that represents a specific <i>relative time</i>.</dd>
<dt>abs_time</dt>
<dd>A point in time at which the thread will stop blocking waiting to acquire a lock. If reached, the object is initialized not <i><a href="/unique_lock::owns_lock">owning a lock</a></i>.<br>
<samp><a href="/time_point">time_point</a></samp> is an object that represents a specific <i>absolute time</i>.</dd>
<dt>x</dt>
<dd>Another <samp><a href="/unique_lock">unique_lock</a></samp> object.<br>
</dd>
</dl>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br></code></pre></td>
<td class="source"><pre><code><cite>// unique_lock constructor example</cite>
<dfn>#include &lt;iostream&gt;       </dfn><cite>// std::cout</cite>
<dfn>#include &lt;thread&gt;         </dfn><cite>// std::thread</cite>
<dfn>#include &lt;mutex&gt;          </dfn><cite>// std::mutex, std::lock, std::unique_lock</cite>
                          <cite>// std::adopt_lock, std::defer_lock</cite>
std::mutex foo,bar;

<var>void</var> task_a () {
  std::lock (foo,bar);         <cite>// simultaneous lock (prevents deadlock)</cite>
  std::unique_lock&lt;std::mutex&gt; lck1 (foo,std::adopt_lock);
  std::unique_lock&lt;std::mutex&gt; lck2 (bar,std::adopt_lock);
  std::cout &lt;&lt; <kbd>"task a\n"</kbd>;
  <cite>// (unlocked automatically on destruction of lck1 and lck2)</cite>
}

<var>void</var> task_b () {
  <cite>// foo.lock(); bar.lock(); // replaced by:</cite>
  std::unique_lock&lt;std::mutex&gt; lck1, lck2;
  lck1 = std::unique_lock&lt;std::mutex&gt;(bar,std::defer_lock);
  lck2 = std::unique_lock&lt;std::mutex&gt;(foo,std::defer_lock);
  std::lock (lck1,lck2);       <cite>// simultaneous lock (prevents deadlock)</cite>
  std::cout &lt;&lt; <kbd>"task b\n"</kbd>;
  <cite>// (unlocked automatically on destruction of lck1 and lck2)</cite>
}


<var>int</var> main ()
{
  std::thread th1 (task_a);
  std::thread th2 (task_b);

  th1.join();
  th2.join();

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output (order of lines may vary):<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
task a
task b
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Argument <var>m</var> may be accessed or modified (as an <i>atomic operation</i>, causing no data races).<br>
The object keeps a reference to <var>m</var>, which may be accessed or modified by its operations.<br>
The <i>move constructor (9)</i> modifies <var>x</var>.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
If the <i>mutex object</i> supports the operation applied to <var>m</var> (if any) in its current state, the constructor never throws exceptions (no-throw guarantee).<br>
Otherwise, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/mutex/unique_lock/lock/"><b>unique_lock::lock</b></a></dt><dd>Lock mutex <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/mutex/unique_lock/try_lock/"><b>unique_lock::try_lock</b></a></dt><dd>Lock mutex if not locked <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/mutex/unique_lock/try_lock_for/"><b>unique_lock::try_lock_for</b></a></dt><dd>Try to lock mutex during  time span <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/mutex/unique_lock/try_lock_until/"><b>unique_lock::try_lock_until</b></a></dt><dd>Try to lock mutex until time point <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/mutex/unique_lock/~unique_lock/"><b>unique_lock::~unique_lock</b></a></dt><dd>Destroy unique_lock <span class="typ">(public member function)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
<script type="text/javascript">
    google_ad_client = "ca-pub-1444228343479937";
    google_ad_slot = "9701143201";
    google_ad_width = 728;
    google_ad_height = 90;
</script>
<!-- leaderboard -->
<script type="text/javascript"
src="//pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="/">C++</a></b></h3>
<ul>
<li class="folder info"><a href="/info/">Information</a></li>
<li class="folder doc"><a href="/doc/">Tutorials</a></li>
<li class="folder selected reference"><a href="/reference/">Reference</a></li>
<li class="folder articles"><a href="/articles/">Articles</a></li>
<li class="folder forum"><a href="/forum/">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="/reference/">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="/reference/clibrary/">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cassert/"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cctype/"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cerrno/"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cfenv/"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cfloat/"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cinttypes/"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ciso646/"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/climits/"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/clocale/"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cmath/"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csetjmp/"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csignal/"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdarg/"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cstdbool/"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstddef/"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cstdint/"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdio/"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdlib/"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstring/"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/ctgmath/"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ctime/"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cuchar/"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwchar/"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwctype/"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/stl/">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/array/"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/deque/"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/forward_list/"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/list/"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/map/"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/queue/"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/set/"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stack/"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_map/"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_set/"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/vector/"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/iolibrary/">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/fstream/"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iomanip/"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ios/"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iosfwd/"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iostream/"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/istream/"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ostream/"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/sstream/"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/streambuf/"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="/reference/multithreading/">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/atomic/"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/condition_variable/"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/future/"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 selected folder"><a href="/reference/mutex/"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/thread/"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/std/">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/algorithm/"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/bitset/"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/chrono/"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/codecvt/"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/complex/"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/exception/"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/functional/"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/initializer_list/"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iterator/"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/limits/"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/locale/"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/memory/"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/new/"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/numeric/"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/random/"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/ratio/"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/regex/"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stdexcept/"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/string/"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/system_error/"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/tuple/"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/typeindex/"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/typeinfo/"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/type_traits/"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/utility/"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/valarray/"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="mutex_box">
<h3><b><a href="/reference/mutex/">&lt;mutex&gt;</a></b></h3>
<ul>
<li class="C_Collapsable"><h4>classes:</h4><ul>
<li class="cpp11"><a href="/reference/mutex/adopt_lock_t/"><span>adopt_lock_t</span></a></li>
<li class="cpp11"><a href="/reference/mutex/defer_lock_t/"><span>defer_lock_t</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/lock_guard/"><span>lock_guard</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/mutex/"><span>mutex</span></a></li>
<li class="cpp11"><a href="/reference/mutex/once_flag/"><span>once_flag</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/recursive_mutex/"><span>recursive_mutex</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/recursive_timed_mutex/"><span>recursive_timed_mutex</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/timed_mutex/"><span>timed_mutex</span></a></li>
<li class="cpp11"><a href="/reference/mutex/try_to_lock_t/"><span>try_to_lock_t</span></a></li>
<li class="cpp11 selected folder"><a href="/reference/mutex/unique_lock/"><span>unique_lock</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>functions:</h4><ul>
<li class="cpp11"><a href="/reference/mutex/call_once/"><span>call_once</span></a></li>
<li class="cpp11"><a href="/reference/mutex/lock/"><span>lock</span></a></li>
<li class="cpp11"><a href="/reference/mutex/try_lock/"><span>try_lock</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>constants:</h4><ul>
<li class="cpp11"><a href="/reference/mutex/adopt_lock/"><span>adopt_lock</span></a></li>
<li class="cpp11"><a href="/reference/mutex/defer_lock/"><span>defer_lock</span></a></li>
<li class="cpp11"><a href="/reference/mutex/try_to_lock/"><span>try_to_lock</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="unique_lock_box">
<h3><b><a href="/reference/mutex/unique_lock/">unique_lock</a></b></h3>
<ul>
<li class="cpp11 selected"><a href="/reference/mutex/unique_lock/unique_lock/"><span>unique_lock::unique_lock</span></a></li>
<li class="cpp11"><a href="/reference/mutex/unique_lock/~unique_lock/"><span>unique_lock::~unique_lock</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp11"><a href="/reference/mutex/unique_lock/lock/"><span>unique_lock::lock</span></a></li>
<li class="cpp11"><a href="/reference/mutex/unique_lock/mutex/"><span>unique_lock::mutex</span></a></li>
<li class="cpp11"><a href="/reference/mutex/unique_lock/operator=/"><span>unique_lock::operator=</span></a></li>
<li class="cpp11"><a href="/reference/mutex/unique_lock/operator_bool/"><span>unique_lock::operator bool</span></a></li>
<li class="cpp11"><a href="/reference/mutex/unique_lock/owns_lock/"><span>unique_lock::owns_lock</span></a></li>
<li class="cpp11"><a href="/reference/mutex/unique_lock/release/"><span>unique_lock::release</span></a></li>
<li class="cpp11"><a href="/reference/mutex/unique_lock/swap/"><span>unique_lock::swap</span></a></li>
<li class="cpp11"><a href="/reference/mutex/unique_lock/try_lock/"><span>unique_lock::try_lock</span></a></li>
<li class="cpp11"><a href="/reference/mutex/unique_lock/try_lock_for/"><span>unique_lock::try_lock_for</span></a></li>
<li class="cpp11"><a href="/reference/mutex/unique_lock/try_lock_until/"><span>unique_lock::try_lock_until</span></a></li>
<li class="cpp11"><a href="/reference/mutex/unique_lock/unlock/"><span>unique_lock::unlock</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>non-member overloads:</h4><ul>
<li class="cpp11"><a href="/reference/mutex/unique_lock/swap-free/"><span>swap (unique_lock)</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="/">Home page</a> | <a href="/privacy.do">Privacy policy</a><br>&copy; cplusplus.com, 2000-2016 - All rights reserved - <i>v3.1</i><br><a href="/contact.do?referrer=www.cplusplus.com%2Freference%2Fmutex%2Funique_lock%2Funique_lock%2F">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','/reference/edit.cgi?a=mutex+unique_lock+unique_lock'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='/reference/delete.cgi?a=mutex+unique_lock+unique_lock'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>