<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>multimap::equal_range - C++ Reference</title>
<link rel="canonical" href="http://www.cplusplus.com/reference/map/multimap/equal_range/">
<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
<link rel="stylesheet" type="text/css" href="/v321/main.css">
<script src="/v321/main.js" type="text/javascript"></script>
<script type='text/javascript'>
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
(function() {
var gads = document.createElement('script');
gads.async = true;
gads.type = 'text/javascript';
var useSSL = 'https:' == document.location.protocol;
gads.src = (useSSL ? 'https:' : 'http:') + 
'//www.googletagservices.com/tag/js/gpt.js';
var node = document.getElementsByTagName('script')[0];
node.parentNode.insertBefore(gads, node);
})();
</script>

<script type='text/javascript'>
googletag.cmd.push(function() {
googletag.defineSlot('/32882001/L', [728, 90], 'div-gpt-ad-1427191279638-0').addService(googletag.pubads());
googletag.enableServices();
});
</script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="/" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="/reference/">Reference</a></li>
<li><a href="/reference/map/">&lt;map&gt;</a></li>
<li><a href="/reference/map/multimap/">multimap</a></li>
<li class="here">equal_range</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support">
<div id='div-gpt-ad-1427191279638-0' style='width:728px; height:90px;'>
<script type='text/javascript'>
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1427191279638-0'); });
</script>
</div>
</div>
<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/map/multimap/">multimap</a>::equal_range</h1>
<div class="C_prototype"><pre>pair&lt;const_iterator,const_iterator&gt; equal_range (const key_type&amp; k) const;pair&lt;iterator,iterator&gt;             equal_range (const key_type&amp; k);</pre></div><div id="I_description">Get range of equal elements</div>
<section id="description">
Returns the bounds of a range that includes all the elements in the container which have a <i>key</i> equivalent to <i>k</i>.<br>
<br>
If no matches are found, the range returned has a length of zero, with both iterators pointing to the first element that has a key considered to go after <i>k</i> according to the container's <a href="/multimap::key_comp">internal comparison object</a> (<a href="/multimap::key_comp">key_comp</a>).<br>
<br>
Two <i>keys</i> are considered equivalent if the container's <a href="/multimap::key_comp">comparison object</a> returns <tt>false</tt> reflexively (i.e., no matter the order in which the keys are passed as arguments).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>k</dt>
<dd>Key to search for.<br>
Member type <tt>key_type</tt> is the type of the elements in the container, defined in <a href="/multimap">multimap</a> as an alias of its first template parameter (<tt>Key</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
The function returns a <a href="/pair">pair</a>, whose member <tt>pair::first</tt> is the lower bound of the range (the same as <a href="/multimap::lower_bound">lower_bound</a>), and <tt>pair::second</tt> is the upper bound (the same as <a href="/multimap::upper_bound">upper_bound</a>).<br>
<br>
If the <a href="/multimap">multimap</a> object is const-qualified, the function returns a <a href="/pair">pair</a> of <tt>const_iterator</tt>. Otherwise, it returns a <a href="/pair">pair</a> of <tt>iterator</tt>.<br>
<br>
Member types <tt>iterator</tt> and <tt>const_iterator</tt> are <a href="/BidirectionalIterator">bidirectional iterator</a> types pointing to elements (of type <tt>value_type</tt>).<br>
Notice that <tt>value_type</tt> in <a href="/multimap">multimap</a> containers is itself also a <a href="/pair">pair</a> type: <tt><a href="/pair">pair</a>&lt;const key_type, mapped_type&gt;</tt>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br></code></pre></td>
<td class="source"><pre><code><cite>// multimap::equal_range</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;map&gt;</dfn>

<var>int</var> main ()
{
  std::multimap&lt;<var>char</var>,<var>int</var>&gt; mymm;

  mymm.insert(std::pair&lt;<var>char</var>,<var>int</var>&gt;(<kbd>'a'</kbd>,10));
  mymm.insert(std::pair&lt;<var>char</var>,<var>int</var>&gt;(<kbd>'b'</kbd>,20));
  mymm.insert(std::pair&lt;<var>char</var>,<var>int</var>&gt;(<kbd>'b'</kbd>,30));
  mymm.insert(std::pair&lt;<var>char</var>,<var>int</var>&gt;(<kbd>'b'</kbd>,40));
  mymm.insert(std::pair&lt;<var>char</var>,<var>int</var>&gt;(<kbd>'c'</kbd>,50));
  mymm.insert(std::pair&lt;<var>char</var>,<var>int</var>&gt;(<kbd>'c'</kbd>,60));
  mymm.insert(std::pair&lt;<var>char</var>,<var>int</var>&gt;(<kbd>'d'</kbd>,60));

  std::cout &lt;&lt; <kbd>"mymm contains:\n"</kbd>;
  <var>for</var> (<var>char</var> ch=<kbd>'a'</kbd>; ch&lt;=<kbd>'d'</kbd>; ch++)
  {
    std::pair &lt;std::multimap&lt;<var>char</var>,<var>int</var>&gt;::iterator, std::multimap&lt;<var>char</var>,<var>int</var>&gt;::iterator&gt; ret;
    ret = mymm.equal_range(ch);
    std::cout &lt;&lt; ch &lt;&lt; <kbd>" =&gt;"</kbd>;
    <var>for</var> (std::multimap&lt;<var>char</var>,<var>int</var>&gt;::iterator it=ret.first; it!=ret.second; ++it)
      std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; it-&gt;second;
    std::cout &lt;&lt; <kbd>'\n'</kbd>;
  }

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>mymm contains:
a =&gt; 10
b =&gt; 20 30 40
c =&gt; 50 60
d =&gt; 60
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Logarithmic in <a href="/multimap::size">size</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is accessed (neither the const nor the non-const versions modify the container).<br>
No mapped values are accessed: concurrently accessing or modifying elements is safe.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
<b>Strong guarantee:</b> if an exception is thrown, there are no changes in the container.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/map/multimap/count/"><b>multimap::count</b></a></dt><dd>Count elements with a specific key <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/multimap/lower_bound/"><b>multimap::lower_bound</b></a></dt><dd>Return iterator to lower bound <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/multimap/upper_bound/"><b>multimap::upper_bound</b></a></dt><dd>Return iterator to upper bound <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/map/multimap/find/"><b>multimap::find</b></a></dt><dd>Get iterator to element <span class="typ">(public member function)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="/">C++</a></b></h3>
<ul>
<li class="folder info"><a href="/info/">Information</a></li>
<li class="folder doc"><a href="/doc/">Tutorials</a></li>
<li class="folder selected reference"><a href="/reference/">Reference</a></li>
<li class="folder articles"><a href="/articles/">Articles</a></li>
<li class="folder forum"><a href="/forum/">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="/reference/">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="/reference/clibrary/">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cassert/"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cctype/"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cerrno/"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cfenv/"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cfloat/"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cinttypes/"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ciso646/"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/climits/"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/clocale/"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cmath/"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csetjmp/"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csignal/"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdarg/"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cstdbool/"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstddef/"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cstdint/"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdio/"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdlib/"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstring/"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/ctgmath/"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ctime/"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cuchar/"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwchar/"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwctype/"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="/reference/stl/">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/array/"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/deque/"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/forward_list/"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/list/"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="/reference/map/"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/queue/"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/set/"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stack/"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_map/"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_set/"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/vector/"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/iolibrary/">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/fstream/"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iomanip/"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ios/"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iosfwd/"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iostream/"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/istream/"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ostream/"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/sstream/"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/streambuf/"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/multithreading/">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/atomic/"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/condition_variable/"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/future/"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/thread/"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/std/">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/algorithm/"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/bitset/"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/chrono/"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/codecvt/"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/complex/"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/exception/"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/functional/"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/initializer_list/"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iterator/"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/limits/"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/locale/"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/memory/"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/new/"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/numeric/"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/random/"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/ratio/"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/regex/"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stdexcept/"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/string/"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/system_error/"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/tuple/"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/typeindex/"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/typeinfo/"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/type_traits/"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/utility/"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/valarray/"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="map_box">
<h3><b><a href="/reference/map/">&lt;map&gt;</a></b></h3>
<ul>
<li class="cpp98 cpp11 folder"><a href="/reference/map/map/"><span>map</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="/reference/map/multimap/"><span>multimap</span></a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="multimap_box">
<h3><b><a href="/reference/map/multimap/">multimap</a></b></h3>
<ul>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/multimap/"><span>multimap::multimap</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/~multimap/"><span>multimap::~multimap</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/begin/"><span>multimap::begin</span></a></li>
<li class="cpp11"><a href="/reference/map/multimap/cbegin/"><span>multimap::cbegin</span></a></li>
<li class="cpp11"><a href="/reference/map/multimap/cend/"><span>multimap::cend</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/clear/"><span>multimap::clear</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/count/"><span>multimap::count</span></a></li>
<li class="cpp11"><a href="/reference/map/multimap/crbegin/"><span>multimap::crbegin</span></a></li>
<li class="cpp11"><a href="/reference/map/multimap/crend/"><span>multimap::crend</span></a></li>
<li class="cpp11"><a href="/reference/map/multimap/emplace/"><span>multimap::emplace</span></a></li>
<li class="cpp11"><a href="/reference/map/multimap/emplace_hint/"><span>multimap::emplace_hint</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/empty/"><span>multimap::empty</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/end/"><span>multimap::end</span></a></li>
<li class="cpp98 cpp11 selected"><a href="/reference/map/multimap/equal_range/"><span>multimap::equal_range</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/erase/"><span>multimap::erase</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/find/"><span>multimap::find</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/get_allocator/"><span>multimap::get_allocator</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/insert/"><span>multimap::insert</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/key_comp/"><span>multimap::key_comp</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/lower_bound/"><span>multimap::lower_bound</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/max_size/"><span>multimap::max_size</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/operator=/"><span>multimap::operator=</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/rbegin/"><span>multimap::rbegin</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/rend/"><span>multimap::rend</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/size/"><span>multimap::size</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/swap/"><span>multimap::swap</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/upper_bound/"><span>multimap::upper_bound</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/value_comp/"><span>multimap::value_comp</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>non-member overloads:</h4><ul>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/operators/"><span>relational operators (multimap)</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/map/multimap/swap-free/"><span>swap (multimap)</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="/">Home page</a> | <a href="/privacy.do">Privacy policy</a><br>&copy; cplusplus.com, 2000-2016 - All rights reserved - <i>v3.1</i><br><a href="/contact.do?referrer=www.cplusplus.com%2Freference%2Fmap%2Fmultimap%2Fequal_range%2F">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','/reference/edit.cgi?a=map+multimap+equal_range'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='/reference/delete.cgi?a=map+multimap+equal_range'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>