<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>fscanf - C++ Reference</title>
<link rel="canonical" href="http://www.cplusplus.com/reference/cstdio/fscanf/">
<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
<link rel="stylesheet" type="text/css" href="/v321/main.css">
<script src="/v321/main.js" type="text/javascript"></script>
<script type='text/javascript'>
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
(function() {
var gads = document.createElement('script');
gads.async = true;
gads.type = 'text/javascript';
var useSSL = 'https:' == document.location.protocol;
gads.src = (useSSL ? 'https:' : 'http:') + 
'//www.googletagservices.com/tag/js/gpt.js';
var node = document.getElementsByTagName('script')[0];
node.parentNode.insertBefore(gads, node);
})();
</script>

<script type='text/javascript'>
googletag.cmd.push(function() {
googletag.defineSlot('/32882001/L', [728, 90], 'div-gpt-ad-1427191279638-0').addService(googletag.pubads());
googletag.enableServices();
});
</script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="/" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="/reference/">Reference</a></li>
<li><a href="/reference/cstdio/">&lt;cstdio&gt; </a></li>
<li class="here">fscanf</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support">
<div id='div-gpt-ad-1427191279638-0' style='width:728px; height:90px;'>
<script type='text/javascript'>
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1427191279638-0'); });
</script>
</div>
</div>
<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdio&gt;</div>
<h1>fscanf</h1>
<div class="C_prototype"><pre>int fscanf ( FILE * stream, const char * format, ... );</pre></div><div id="I_description">Read formatted data from stream</div>
<section id="description">
Reads data from the <i>stream</i> and stores them according to the parameter <i>format</i> into the locations pointed by the additional arguments.<br>
<br>
The additional arguments should point to already allocated objects of the type specified by their corresponding format specifier within the <i>format</i> string.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>stream</dt>
<dd>Pointer to a <a href="/FILE">FILE</a> object that identifies the input stream to read data from.</dd>
<dt>format</dt>
<dd>C string that contains a sequence of characters that control how characters extracted from the stream are treated:<br>
<ul>
<li><b>Whitespace character:</b> the function will read and ignore any whitespace characters encountered before the next non-whitespace character (whitespace characters include spaces, newline and tab characters -- see <a href="/isspace">isspace</a>). A single whitespace in the <i>format</i> string validates any quantity of whitespace characters extracted from the <i>stream</i> (including none).</li>
<li><b>Non-whitespace character, except format specifier (%):</b> Any character that is not either a whitespace character (blank, newline or tab) or part of a <i>format specifier</i> (which begin with a <tt>%</tt> character) causes the function to read the next character from the stream, compare it to this non-whitespace character and if it matches, it is discarded and the function continues with the next character of <i>format</i>. If the character does not match, the function fails, returning and leaving subsequent characters of the stream unread.</li>
<li><b>Format specifiers:</b> A sequence formed by an initial percentage sign (<tt>%</tt>) indicates a format specifier, which is used to specify the type and format of the data to be retrieved from the <i>stream</i> and stored into the locations pointed by the additional arguments.</li>
</ul>
<br>
A <i>format specifier</i> for <tt>fscanf</tt> follows this prototype:<br>
 <br>
<tt>%[*][width][length]specifier</tt> <br>
 <br>
Where the <i>specifier</i> character at the end is the most significant component, since it defines which characters are extracted, their interpretation and the type of its corresponding argument:<br>
<table class="boxed"><tr><th><i>specifier</i></th><th>Description</th><th>Characters extracted</th></tr>
<tr><td><tt>i</tt>, <tt>u</tt></td><td>Integer</td><td>Any number of digits, optionally preceded by a sign (<tt>+</tt> or <tt>-</tt>).<br>
<a href="/isdigit">Decimal digits</a> assumed by default (<tt>0-9</tt>), but a <tt>0</tt> prefix introduces octal digits (<tt>0-7</tt>), and <tt>0x</tt> <a href="/isxdigit">hexadecimal digits</a> (<tt>0-f</tt>).</td></tr>
<tr><td><tt>d</tt></td><td>Decimal integer</td><td>Any number of <a href="/isdigit">decimal digits</a> (<tt>0-9</tt>), optionally preceded by a sign (<tt>+</tt> or <tt>-</tt>).</td></tr>
<tr><td><tt>o</tt></td><td>Octal integer</td><td>Any number of octal digits (<tt>0-7</tt>), optionally preceded by a sign (<tt>+</tt> or <tt>-</tt>).</td></tr>
<tr><td><tt>x</tt></td><td>Hexadecimal integer</td><td>Any number of <a href="/isxdigit">hexadecimal digits</a> (<tt>0-9</tt>, <tt>a-f</tt>, <tt>A-F</tt>), optionally preceded by <tt>0x</tt> or <tt>0X</tt>, and all optionally preceded by a sign (<tt>+</tt> or <tt>-</tt>).</td></tr>
<tr><td><tt>f</tt>, <tt>e</tt>, <tt>g</tt></td><td rowspan="2">Floating point number</td><td rowspan="2">A series of <a href="/isdigit">decimal</a> digits, optionally containing a decimal point, optionally preceeded by a sign (<tt>+</tt> or <tt>-</tt>) and optionally followed by the <tt>e</tt> or <tt>E</tt> character and a decimal integer (or some of the other sequences supported by <samp><a href="/strtod">strtod</a></samp>).<br>
Implementations complying with C99 also support hexadecimal floating-point format when preceded by <code>0x</code> or <code>0X</code>.</td></tr>
<tr class="cpp11"><td><tt>a</tt></td></tr>
<tr><td><tt>c</tt></td><td>Character</td><td>The next character. If a <i>width</i> other than <tt>1</tt> is specified, the function reads exactly <i>width</i> characters and stores them in the successive locations of the array passed as argument. No null character is appended at the end.</td></tr>
<tr><td><tt>s</tt></td><td>String of characters</td><td>Any number of non-whitespace characters, stopping at the first <a href="/isspace">whitespace</a> character found. A terminating null character is automatically added at the end of the stored sequence.</td></tr>
<tr><td><tt>p</tt></td><td>Pointer address</td><td>A sequence of characters representing a pointer. The particular format used depends on the system and library implementation, but it is the same as the one used to format <tt>%p</tt> in <a href="/fprintf">fprintf</a>.</td></tr>
<tr><td><tt>[</tt><i>characters</i><tt>]</tt></td><td>Scanset</td><td>Any number of the characters specified between the brackets.<br>
A dash (<tt>-</tt>) that is not the first character may produce non-portable behavior in some library implementations. </td></tr>
<tr><td><tt>[^</tt><i>characters</i><tt>]</tt></td><td>Negated scanset</td><td>Any number of characters none of them specified as <i>characters</i> between the brackets.</td></tr>
<tr><td><tt>n</tt></td><td>Count</td><td>No input is consumed.<br>
The number of characters read so far from <var>stream</var> is stored in the pointed location.</td></tr>
<tr><td><tt>%</tt></td><td><tt>%</tt></td><td>A <tt>%</tt> followed by another <tt>%</tt> matches a single <tt>%</tt>.</td></tr>
</table>
Except for <tt>n</tt>, at least one character shall be consumed by any specifier. Otherwise the match fails, and the scan ends there.<br>
<br>
The <i>format specifier</i> can also contain sub-specifiers: <i>asterisk</i> (<tt>*</tt>), <i>width</i> and <i>length</i> (in that order), which are optional and follow these specifications:<br>
<table class="boxed"><tr><th><i>sub-specifier</i></th><th>description</th></tr>
<tr><td><tt>*</tt></td><td>An optional starting asterisk indicates that the data is to be read from the stream but ignored (i.e. it is not stored in the location pointed by an argument).</td></tr>
<tr><td><i>width</i></td><td>Specifies the maximum number of characters to be read in the current reading operation (optional).</td></tr>
<tr><td><i>length</i></td><td>One of <tt>hh</tt>, <tt>h</tt>, <tt>l</tt>, <tt>ll</tt>, <tt>j</tt>, <tt>z</tt>, <tt>t</tt>, <tt>L</tt> (optional).<br>
This alters the expected type of the storage pointed by the corresponding argument (see below).</td></tr>
</table>
<br>
This is a chart showing the types expected for the corresponding arguments where input is stored (both with and without a <i>length</i> sub-specifier):<br>
<table class="boxed">
<tr><th></th><th colspan="7">specifiers</th></tr>
<tr><th><i>length</i></th><th><tt>d i</tt></th><th><tt>u o x</tt></th><th><tt>f e g a</tt></th><th><tt>c s [] [^]</tt></th><th><tt>p</tt></th><th><tt>n</tt></th></tr>
<tr><td><i>(none)</i></td><td class="yes"><tt>int*</tt></td><td class="yes"><tt>unsigned int*</tt></td><td class="yes"><tt>float*</tt></td><td class="yes"><tt>char*</tt></td><td class="yes"><tt>void**</tt></td><td class="yes"><tt>int*</tt></td></tr>
<tr class="cpp11"><td><tt>hh</tt></td><td class="yes"><tt>signed char*</tt></td><td class="yes"><tt>unsigned char*</tt></td><td class="no"></td><td class="no"></td><td class="no"></td><td class="yes"><tt>signed char*</tt></td></tr>
<tr><td><tt>h</tt></td><td class="yes"><tt>short int*</tt></td><td class="yes"><tt>unsigned short int*</tt></td><td class="no"></td><td class="no"></td><td class="no"></td><td class="yes"><tt>short int*</tt></td></tr>
<tr><td><tt>l</tt></td><td class="yes"><tt>long int*</tt></td><td class="yes"><tt>unsigned long int*</tt></td><td class="yes"><tt>double*</tt></td><td class="yes"><tt>wchar_t*</tt></td><td class="no"></td><td class="yes"><tt>long int*</tt></td></tr>
<tr class="cpp11"><td><tt>ll</tt></td><td class="yes"><tt>long long int*</tt></td><td class="yes"><tt>unsigned long long int*</tt></td><td class="no"></td><td class="no"></td><td class="no"></td><td class="yes"><tt>long long int*</tt></td></tr>
<tr class="cpp11"><td><tt>j</tt></td><td class="yes"><tt><a href="/intmax_t">intmax_t</a>*</tt></td><td class="yes"><tt><a href="/uintmax_t">uintmax_t</a>*</tt></td><td class="no"></td><td class="no"></td><td class="no"></td><td class="yes"><tt><a href="/intmax_t">intmax_t</a>*</tt></td></tr>
<tr class="cpp11"><td><tt>z</tt></td><td class="yes"><tt><a href="/size_t">size_t</a>*</tt></td><td class="yes"><tt><a href="/size_t">size_t</a>*</tt></td><td class="no"></td><td class="no"></td><td class="no"></td><td class="yes"><tt><a href="/size_t">size_t</a>*</tt></td></tr>
<tr class="cpp11"><td><tt>t</tt></td><td class="yes"><tt><a href="/ptrdiff_t">ptrdiff_t</a>*</tt></td><td class="yes"><tt><a href="/ptrdiff_t">ptrdiff_t</a>*</tt></td><td class="no"></td><td class="no"></td><td class="no"></td><td class="yes"><tt><a href="/ptrdiff_t">ptrdiff_t</a>*</tt></td></tr>
<tr><td><tt>L</tt></td><td class="no"></td><td class="no"></td><td class="yes"><tt>long double*</tt></td><td class="no"></td><td class="no"></td><td class="no"></td></tr>
</table>
<b>Note:</b> Yellow rows indicate specifiers and sub-specifiers introduced by C99.<br>
</dd>
<dt>... <i>(additional arguments)</i></dt>
<dd>Depending on the <i>format</i> string, the function may expect a sequence of additional arguments, each containing a pointer to allocated storage where the interpretation of the extracted characters is stored with the appropriate type.<br>
There should be at least as many of these arguments as the number of values stored by the <i>format specifiers</i>. Additional arguments are ignored by the function.<br>
These arguments are expected to be pointers: to store the result of a <tt>fscanf</tt> operation on a regular variable, its name should be preceded by the <i>reference operator</i> (<tt>&</tt>) (see <a href="#example">example</a>).<br>
</dd></dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
On success, the function returns the number of items of the argument list successfully filled. This count can match the expected number of items or be less (even zero) due to a matching failure, a reading error, or the reach of the <i>end-of-file</i>.<br>
<br>
If a reading error happens or the <i>end-of-file</i> is reached while reading, the proper indicator is set (<a href="/feof">feof</a> or <a href="/ferror">ferror</a>). And, if either happens before any data could be successfully read, <a href="/EOF">EOF</a> is returned.<br>
<br>
If an encoding error happens interpreting wide characters, the function sets <a href="/errno">errno</a> to <tt>EILSEQ</tt>.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br></code></pre></td>
<td class="source"><pre><code><cite>/* fscanf example */</cite>
<dfn>#include &lt;stdio.h&gt;</dfn>

<var>int</var> main ()
{
  <var>char</var> str [80];
  <var>float</var> f;
  FILE * pFile;

  pFile = fopen (<kbd>"myfile.txt"</kbd>,<kbd>"w+"</kbd>);
  fprintf (pFile, <kbd>"%f %s"</kbd>, 3.1416, <kbd>"PI"</kbd>);
  rewind (pFile);
  fscanf (pFile, <kbd>"%f"</kbd>, &amp;f);
  fscanf (pFile, <kbd>"%s"</kbd>, str);
  fclose (pFile);
  printf (<kbd>"I have read: %f and %s \n"</kbd>,f,str);
  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
This sample code creates a file called <tt>myfile.txt</tt> and writes a float number and a string to it. Then, the stream is rewinded and both values are read with <tt>fscanf</tt>. It finally produces an output similar to:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>I have read: 3.141600 and PI
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="compatibility">
<h3>Compatibility</h3>
Particular library implementations may support additional specifiers and sub-specifiers.<br>
Those listed here are supported by the latest C and C++ standards (both published in 2011), but those in yellow were introduced by C99 (only required for C++ implementations since C++11), and may not be supported by libraries that comply with older standards.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdio/scanf/"><b>scanf</b></a></dt><dd>Read formatted data from stdin <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdio/fprintf/"><b>fprintf</b></a></dt><dd>Write formatted data to stream <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdio/fread/"><b>fread</b></a></dt><dd>Read block of data from stream <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdio/fgets/"><b>fgets</b></a></dt><dd>Get string from stream <span class="typ">(function)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
<script type="text/javascript">
    google_ad_client = "ca-pub-1444228343479937";
    google_ad_slot = "9701143201";
    google_ad_width = 728;
    google_ad_height = 90;
</script>
<!-- leaderboard -->
<script type="text/javascript"
src="//pagead2.googlesyndication.com/pagead/show_ads.js">
</script></div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="/">C++</a></b></h3>
<ul>
<li class="folder info"><a href="/info/">Information</a></li>
<li class="folder doc"><a href="/doc/">Tutorials</a></li>
<li class="folder selected reference"><a href="/reference/">Reference</a></li>
<li class="folder articles"><a href="/articles/">Articles</a></li>
<li class="folder forum"><a href="/forum/">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="/reference/">Reference</a></b></h3>
<ul>
<li class="C_Collapsable"><h4><a href="/reference/clibrary/">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cassert/"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cctype/"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cerrno/"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cfenv/"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cfloat/"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cinttypes/"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ciso646/"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/climits/"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/clocale/"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cmath/"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csetjmp/"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csignal/"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdarg/"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cstdbool/"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstddef/"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cstdint/"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 selected folder"><a href="/reference/cstdio/"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdlib/"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstring/"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/ctgmath/"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ctime/"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cuchar/"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwchar/"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwctype/"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/stl/">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/array/"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/deque/"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/forward_list/"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/list/"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/map/"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/queue/"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/set/"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stack/"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_map/"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_set/"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/vector/"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/iolibrary/">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/fstream/"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iomanip/"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ios/"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iosfwd/"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iostream/"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/istream/"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ostream/"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/sstream/"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/streambuf/"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/multithreading/">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/atomic/"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/condition_variable/"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/future/"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/thread/"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/std/">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/algorithm/"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/bitset/"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/chrono/"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/codecvt/"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/complex/"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/exception/"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/functional/"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/initializer_list/"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iterator/"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/limits/"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/locale/"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/memory/"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/new/"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/numeric/"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/random/"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/ratio/"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/regex/"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stdexcept/"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/string/"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/system_error/"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/tuple/"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/typeindex/"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/typeinfo/"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/type_traits/"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/utility/"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/valarray/"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect c90 c99 arm cpp98 cpp11" id="cstdio_box">
<h3><b><a href="/reference/cstdio/">&lt;cstdio&gt; (stdio.h)</a></b></h3>
<ul>
<li class="C_Collapsable"><h4>functions:</h4><ul>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/clearerr/"><span>clearerr</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/fclose/"><span>fclose</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/feof/"><span>feof</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/ferror/"><span>ferror</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/fflush/"><span>fflush</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/fgetc/"><span>fgetc</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/fgetpos/"><span>fgetpos</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/fgets/"><span>fgets</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/fopen/"><span>fopen</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/fprintf/"><span>fprintf</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/fputc/"><span>fputc</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/fputs/"><span>fputs</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/fread/"><span>fread</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/freopen/"><span>freopen</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 selected"><a href="/reference/cstdio/fscanf/"><span>fscanf</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/fseek/"><span>fseek</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/fsetpos/"><span>fsetpos</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/ftell/"><span>ftell</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/fwrite/"><span>fwrite</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/getc/"><span>getc</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/getchar/"><span>getchar</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/gets/"><span>gets</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/perror/"><span>perror</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/printf/"><span>printf</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/putc/"><span>putc</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/putchar/"><span>putchar</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/puts/"><span>puts</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/remove/"><span>remove</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/rename/"><span>rename</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/rewind/"><span>rewind</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/scanf/"><span>scanf</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/setbuf/"><span>setbuf</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/setvbuf/"><span>setvbuf</span></a></li>
<li class="c99 cpp11"><a href="/reference/cstdio/snprintf/"><span>snprintf</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/sprintf/"><span>sprintf</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/sscanf/"><span>sscanf</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/tmpfile/"><span>tmpfile</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/tmpnam/"><span>tmpnam</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/ungetc/"><span>ungetc</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/vfprintf/"><span>vfprintf</span></a></li>
<li class="c99 cpp11"><a href="/reference/cstdio/vfscanf/"><span>vfscanf</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/vprintf/"><span>vprintf</span></a></li>
<li class="c99 cpp11"><a href="/reference/cstdio/vscanf/"><span>vscanf</span></a></li>
<li class="c99 cpp11"><a href="/reference/cstdio/vsnprintf/"><span>vsnprintf</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/vsprintf/"><span>vsprintf</span></a></li>
<li class="c99 cpp11"><a href="/reference/cstdio/vsscanf/"><span>vsscanf</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>objects:</h4><ul>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/stderr/"><span>stderr</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/stdin/"><span>stdin</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/stdout/"><span>stdout</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>types:</h4><ul>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/FILE/"><span>FILE</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/fpos_t/"><span>fpos_t</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/size_t/"><span>size_t</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>macro constants:</h4><ul>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/BUFSIZ/"><span>BUFSIZ</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/EOF/"><span>EOF</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/FILENAME_MAX/"><span>FILENAME_MAX</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/FOPEN_MAX/"><span>FOPEN_MAX</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/L_tmpnam/"><span>L_tmpnam</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/NULL/"><span>NULL</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdio/TMP_MAX/"><span>TMP_MAX</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="/">Home page</a> | <a href="/privacy.do">Privacy policy</a><br>&copy; cplusplus.com, 2000-2016 - All rights reserved - <i>v3.1</i><br><a href="/contact.do?referrer=www.cplusplus.com%2Freference%2Fcstdio%2Ffscanf%2F">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','/reference/edit.cgi?a=cstdio+fscanf'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='/reference/delete.cgi?a=cstdio+fscanf'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>