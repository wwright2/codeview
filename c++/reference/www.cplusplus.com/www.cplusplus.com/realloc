<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>realloc - C++ Reference</title>
<link rel="canonical" href="http://www.cplusplus.com/reference/cstdlib/realloc/">
<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
<link rel="stylesheet" type="text/css" href="/v321/main.css">
<script src="/v321/main.js" type="text/javascript"></script>
<script type='text/javascript'>
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
(function() {
var gads = document.createElement('script');
gads.async = true;
gads.type = 'text/javascript';
var useSSL = 'https:' == document.location.protocol;
gads.src = (useSSL ? 'https:' : 'http:') + 
'//www.googletagservices.com/tag/js/gpt.js';
var node = document.getElementsByTagName('script')[0];
node.parentNode.insertBefore(gads, node);
})();
</script>

<script type='text/javascript'>
googletag.cmd.push(function() {
googletag.defineSlot('/32882001/L', [728, 90], 'div-gpt-ad-1427191279638-0').addService(googletag.pubads());
googletag.enableServices();
});
</script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="/" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="/reference/">Reference</a></li>
<li><a href="/reference/cstdlib/">&lt;cstdlib&gt; </a></li>
<li class="here">realloc</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support">
<div id='div-gpt-ad-1427191279638-0' style='width:728px; height:90px;'>
<script type='text/javascript'>
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1427191279638-0'); });
</script>
</div>
</div>
<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;cstdlib&gt;</div>
<h1>realloc</h1>
<div class="C_prototype"><pre>void* realloc (void* ptr, size_t size);</pre></div><div id="I_description">Reallocate memory block</div>
<section id="description">
Changes the size of the memory block pointed to by <var>ptr</var>.<br>
<br>
The function may move the memory block to a new location (whose address is returned by the function).<br>
<br>
The content of the memory block is preserved up to the lesser of the new and old sizes, even if the block is moved to a new location. If the new <var>size</var> is larger, the value of the newly allocated portion is indeterminate.<br>
<br>
In case that <var>ptr</var> is a null pointer, the function behaves like <samp><a href="/malloc">malloc</a></samp>, assigning a new block of <var>size</var> bytes and returning a pointer to its beginning.<br>
<br>
<div class="C_SwitchCases">
<div title="C90 (C++98)">
Otherwise, if <var>size</var> is zero, the memory previously allocated at <var>ptr</var> is deallocated as if a call to <samp><a href="/free">free</a></samp> was made, and a <i>null pointer</i> is returned.<br>
</div>
<div title="C99/C11 (C++11)">
If <var>size</var> is zero, the return value depends on the particular library implementation: it may either be a <i>null pointer</i> or some other location that shall not be dereferenced.<br>
</div>
</div>
<br>
If the function fails to allocate the requested block of memory, a null pointer is returned, and the memory block pointed to by argument <var>ptr</var> is not deallocated (it is still valid, and with its contents unchanged).<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>ptr</dt>
<dd>Pointer to a memory block previously allocated with <samp><a href="/malloc">malloc</a></samp>, <samp><a href="/calloc">calloc</a></samp> or <samp><a href="/realloc">realloc</a></samp>.<br>
Alternatively, this can be a <i>null pointer</i>, in which case a new block is allocated (as if <samp><a href="/malloc">malloc</a></samp> was called).</dd>
<dt>size</dt>
<dd>New size for the memory block, in bytes.<br>
<samp><a href="/cstdlib:size_t">size_t</a></samp> is an unsigned integral type.<br>
</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
A pointer to the reallocated memory block, which may be either the same as <var>ptr</var> or a new location.<br>
The type of this pointer is <code>void*</code>, which can be cast to the desired type of data pointer in order to be dereferenceable.<br>
<div class="C_SwitchCases">
<div title="C90 (C++98)">
A <i>null-pointer</i> indicates either that <var>size</var> was zero (an thus <var>ptr</var> was deallocated), or that the function did not allocate storage (and thus the block pointed by <var>ptr</var> was not modified).<br>
</div>
<div title="C99/C11 (C++11)">
A <i>null-pointer</i> indicates that the function failed to allocate storage, and thus the block pointed by <var>ptr</var> was not modified.<br>
</div>
</div>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br></code></pre></td>
<td class="source"><pre><code><cite>/* realloc example: rememb-o-matic */</cite>
<dfn>#include &lt;stdio.h&gt;      </dfn><cite>/* printf, scanf, puts */</cite><dfn></dfn>
<dfn>#include &lt;stdlib.h&gt;     </dfn><cite>/* realloc, free, exit, NULL */</cite><dfn></dfn>

<var>int</var> main ()
{
  <var>int</var> input,n;
  <var>int</var> count = 0;
  <var>int</var>* numbers = NULL;
  <var>int</var>* more_numbers = NULL;

  <var>do</var> {
     printf (<kbd>"Enter an integer value (0 to end): "</kbd>);
     scanf (<kbd>"%d"</kbd>, &amp;input);
     count++;

     more_numbers = (<var>int</var>*) realloc (numbers, count * <var>sizeof</var>(<var>int</var>));

     <var>if</var> (more_numbers!=NULL) {
       numbers=more_numbers;
       numbers[count-1]=input;
     }
     <var>else</var> {
       free (numbers);
       puts (<kbd>"Error (re)allocating memory"</kbd>);
       exit (1);
     }
  } <var>while</var> (input!=0);

  printf (<kbd>"Numbers entered: "</kbd>);
  <var>for</var> (n=0;n&lt;count;n++) printf (<kbd>"%d "</kbd>,numbers[n]);
  free (numbers);

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
The program prompts the user for numbers until a zero character is entered. Each time a new value is introduced the memory block pointed by numbers is increased by the size of an <code>int</code>.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Only the storage referenced by <var>ptr</var> and by the returned pointer are modified. No other storage locations are accessed by the call.<br>
If the function releases or reuses a unit of storage that is reused or released by another <i>allocation or deallocation function</i>, the functions are synchronized in such a way that the deallocation happens entirely before the next allocation.<br>
</section>
<br>
<section id="exceptions">
<h3>Exceptions (C++)</h3>
<b>No-throw guarantee:</b> this function never throws exceptions.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/cstdlib/free/"><b>free</b></a></dt><dd>Deallocate memory block <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdlib/calloc/"><b>calloc</b></a></dt><dd>Allocate and zero-initialize array <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/cstdlib/malloc/"><b>malloc</b></a></dt><dd>Allocate memory block <span class="typ">(function)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="/">C++</a></b></h3>
<ul>
<li class="folder info"><a href="/info/">Information</a></li>
<li class="folder doc"><a href="/doc/">Tutorials</a></li>
<li class="folder selected reference"><a href="/reference/">Reference</a></li>
<li class="folder articles"><a href="/articles/">Articles</a></li>
<li class="folder forum"><a href="/forum/">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="/reference/">Reference</a></b></h3>
<ul>
<li class="C_Collapsable"><h4><a href="/reference/clibrary/">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cassert/"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cctype/"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cerrno/"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cfenv/"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cfloat/"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cinttypes/"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ciso646/"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/climits/"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/clocale/"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cmath/"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csetjmp/"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csignal/"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdarg/"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cstdbool/"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstddef/"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cstdint/"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdio/"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 selected folder"><a href="/reference/cstdlib/"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstring/"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/ctgmath/"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ctime/"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cuchar/"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwchar/"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwctype/"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/stl/">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/array/"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/deque/"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/forward_list/"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/list/"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/map/"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/queue/"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/set/"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stack/"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_map/"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_set/"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/vector/"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/iolibrary/">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/fstream/"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iomanip/"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ios/"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iosfwd/"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iostream/"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/istream/"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ostream/"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/sstream/"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/streambuf/"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/multithreading/">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/atomic/"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/condition_variable/"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/future/"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/thread/"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/std/">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/algorithm/"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/bitset/"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/chrono/"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/codecvt/"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/complex/"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/exception/"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/functional/"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/initializer_list/"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iterator/"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/limits/"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/locale/"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/memory/"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/new/"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/numeric/"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/random/"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/ratio/"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/regex/"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stdexcept/"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/string/"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/system_error/"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/tuple/"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/typeindex/"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/typeinfo/"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/type_traits/"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/utility/"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/valarray/"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect c90 c99 arm cpp98 cpp11" id="cstdlib_box">
<h3><b><a href="/reference/cstdlib/">&lt;cstdlib&gt; (stdlib.h)</a></b></h3>
<ul>
<li class="C_Collapsable"><h4>functions:</h4><ul>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/abort/"><span>abort</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/abs/"><span>abs</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/atexit/"><span>atexit</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/atof/"><span>atof</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/atoi/"><span>atoi</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/atol/"><span>atol</span></a></li>
<li class="c99 cpp11"><a href="/reference/cstdlib/atoll/"><span>atoll</span></a></li>
<li class="c11 cpp11"><a href="/reference/cstdlib/at_quick_exit/"><span>at_quick_exit</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/bsearch/"><span>bsearch</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/calloc/"><span>calloc</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/div/"><span>div</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/exit/"><span>exit</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/free/"><span>free</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/getenv/"><span>getenv</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/labs/"><span>labs</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/ldiv/"><span>ldiv</span></a></li>
<li class="c99 cpp11"><a href="/reference/cstdlib/llabs/"><span>llabs</span></a></li>
<li class="c99 cpp11"><a href="/reference/cstdlib/lldiv/"><span>lldiv</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/malloc/"><span>malloc</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/mblen/"><span>mblen</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/mbstowcs/"><span>mbstowcs</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/mbtowc/"><span>mbtowc</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/qsort/"><span>qsort</span></a></li>
<li class="c11 cpp11"><a href="/reference/cstdlib/quick_exit/"><span>quick_exit</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/rand/"><span>rand</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 selected"><a href="/reference/cstdlib/realloc/"><span>realloc</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/srand/"><span>srand</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/strtod/"><span>strtod</span></a></li>
<li class="c99 cpp11"><a href="/reference/cstdlib/strtof/"><span>strtof</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/strtol/"><span>strtol</span></a></li>
<li class="c99 cpp11"><a href="/reference/cstdlib/strtold/"><span>strtold</span></a></li>
<li class="c99 cpp11"><a href="/reference/cstdlib/strtoll/"><span>strtoll</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/strtoul/"><span>strtoul</span></a></li>
<li class="c99 cpp11"><a href="/reference/cstdlib/strtoull/"><span>strtoull</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/system/"><span>system</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/wcstombs/"><span>wcstombs</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/wctomb/"><span>wctomb</span></a></li>
<li class="c99 cpp11"><a href="/reference/cstdlib/_Exit/"><span>_Exit</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>functions (non-standard):</h4><ul>
<li class="arm"><a href="/reference/cstdlib/itoa/"><span>itoa</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>types:</h4><ul>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/div_t/"><span>div_t</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/ldiv_t/"><span>ldiv_t</span></a></li>
<li class="c99 cpp11"><a href="/reference/cstdlib/lldiv_t/"><span>lldiv_t</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/size_t/"><span>size_t</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>macro constants:</h4><ul>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/EXIT_FAILURE/"><span>EXIT_FAILURE</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/EXIT_SUCCESS/"><span>EXIT_SUCCESS</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/MB_CUR_MAX/"><span>MB_CUR_MAX</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/NULL/"><span>NULL</span></a></li>
<li class="c90 c99 arm cpp98 cpp11"><a href="/reference/cstdlib/RAND_MAX/"><span>RAND_MAX</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="/">Home page</a> | <a href="/privacy.do">Privacy policy</a><br>&copy; cplusplus.com, 2000-2016 - All rights reserved - <i>v3.1</i><br><a href="/contact.do?referrer=www.cplusplus.com%2Freference%2Fcstdlib%2Frealloc%2F">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','/reference/edit.cgi?a=cstdlib+realloc'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='/reference/delete.cgi?a=cstdlib+realloc'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>