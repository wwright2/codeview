<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>unordered_multimap::cend - C++ Reference</title>
<link rel="canonical" href="http://www.cplusplus.com/reference/unordered_map/unordered_multimap/cend/">
<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
<link rel="stylesheet" type="text/css" href="/v321/main.css">
<script src="/v321/main.js" type="text/javascript"></script>
<script type='text/javascript'>
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
(function() {
var gads = document.createElement('script');
gads.async = true;
gads.type = 'text/javascript';
var useSSL = 'https:' == document.location.protocol;
gads.src = (useSSL ? 'https:' : 'http:') + 
'//www.googletagservices.com/tag/js/gpt.js';
var node = document.getElementsByTagName('script')[0];
node.parentNode.insertBefore(gads, node);
})();
</script>

<script type='text/javascript'>
googletag.cmd.push(function() {
googletag.defineSlot('/32882001/L', [728, 90], 'div-gpt-ad-1427191279638-0').addService(googletag.pubads());
googletag.enableServices();
});
</script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="/" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="/reference/">Reference</a></li>
<li><a href="/reference/unordered_map/">&lt;unordered_map&gt;</a></li>
<li><a href="/reference/unordered_map/unordered_multimap/">unordered_multimap</a></li>
<li class="here">cend</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support">
<div id='div-gpt-ad-1427191279638-0' style='width:728px; height:90px;'>
<script type='text/javascript'>
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1427191279638-0'); });
</script>
</div>
</div>
<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;unordered_map&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/unordered_map/unordered_multimap/">unordered_multimap</a>::cend<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><table><tr class="odd"><th>container iterator (1)</th><td><pre>const_iterator cend() const noexcept;</pre></td></tr><tr class="even"><th>bucket iterator (2)</th><td><pre>const_local_iterator cend ( size_type n ) const;</pre></td></tr></table></div><div id="I_description">Return const_iterator to end</div>
<section id="description">
Returns a <tt>const_iterator</tt> pointing to the <i>past-the-end</i> element in the <a href="/unordered_multimap">unordered_multimap</a> container (1) or in one of its buckets (2).<br>
<br>
The <tt>const_iterator</tt> returned by <tt>cend</tt> does not point to any element, but to the position that follows the last element in the <a href="/unordered_multimap">unordered_multimap</a> container or in one of its buckets (i.e., their <i>past-the-end</i> position). Thus, the value returned shall not be dereferenced - it is generally used to describe the open-end of a range, such as <tt>[cbegin,cend)</tt>.<br>
<br>
Notice that an <a href="/unordered_multimap">unordered_multimap</a> object makes no guarantees on which order its elements follow. But, in any case, the range that goes from its <tt>cbegin</tt> to its <tt>cend</tt> covers all the elements in the container (or the bucket), until invalidated.<br>
<br>
A <tt>const_iterator</tt> is an iterator that points to const content. This iterator can be increased and decreased (unless it is itself also const), just like the <tt>iterator</tt> returned by <a href="/unordered_multimap::end">unordered_multimap::end</a>, but it cannot be used to modify the contents it points to.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>n</dt>
<dd>Bucket number. This shall be lower than <a href="/unordered_multimap::bucket_count">bucket_count</a>.<br>
It is an optional parameter that changes the behavior of this member function: if set, the <tt>const_iterator</tt> retrieved points to the past-the-end element of a bucket, otherwise it points to the past-the-end element of the container.<br>
Member type <tt>size_type</tt> is an unsigned integral type.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return Value</h3>
A <tt>const_iterator</tt> to the element past the end of the container (2) or the bucket (2).<br>
<br>
Both <tt>const_iterator</tt> and <tt>const_local_iterator</tt> are member types. In the <a href="/unordered_multimap">unordered_multimap</a> class template, these are <a href="/ForwardIterator">forward iterator</a> types.<br>
<tt>const_local_iterator</tt> is an interator of the same category as <tt>const_iterator</tt>. Their <tt>value_type</tt>, <tt>difference_type</tt>, <tt>pointer</tt> and <tt>reference</tt> member types are also the same. But the iterators themselves are not necessarily of the same type.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br></code></pre></td>
<td class="source"><pre><code><cite>// unordered_multimap::cbegin/cend example</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;unordered_map&gt;</dfn>

<var>int</var> main ()
{
  std::unordered_multimap&lt;std::string,std::string&gt; myumm = {
    {<kbd>"apple"</kbd>,<kbd>"red"</kbd>},
    {<kbd>"apple"</kbd>,<kbd>"green"</kbd>},
    {<kbd>"orange"</kbd>,<kbd>"orange"</kbd>},
    {<kbd>"strawberry"</kbd>,<kbd>"red"</kbd>}
  };

  std::cout &lt;&lt; <kbd>"myumm contains:"</kbd>;
  <var>for</var> ( <var>auto</var> it = myumm.cbegin(); it != myumm.cend(); ++it )
    std::cout &lt;&lt; <kbd>" "</kbd> &lt;&lt; it-&gt;first &lt;&lt; <kbd>":"</kbd> &lt;&lt; it-&gt;second;  <cite>// cannot modify *it</cite>
  std::cout &lt;&lt; std::endl;

  std::cout &lt;&lt; <kbd>"myumm's buckets contain:\n"</kbd>;
  <var>for</var> ( <var>unsigned</var> i = 0; i &lt; myumm.bucket_count(); ++i) {
    std::cout &lt;&lt; <kbd>"bucket #"</kbd> &lt;&lt; i &lt;&lt; <kbd>" contains:"</kbd>;
    <var>for</var> ( <var>auto</var> local_it = myumm.cbegin(i); local_it!= myumm.cend(i); ++local_it )
      std::cout &lt;&lt; <kbd>" "</kbd> &lt;&lt; local_it-&gt;first &lt;&lt; <kbd>":"</kbd> &lt;&lt; local_it-&gt;second;
    std::cout &lt;&lt; std::endl;
  }

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>myumm contains: apple:red apple:green orange:orange strawberry:red
myumm's buckets contain:
bucket #0 contains:
bucket #1 contains:
bucket #2 contains: apple:red apple:green
bucket #3 contains: orange:orange
bucket #4 contains: strawberry:red
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Constant.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
No changes.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/unordered_map/unordered_multimap/end/"><b>unordered_multimap::end</b></a></dt><dd>Return iterator to end <span class="typ">(public member type)</span></dd></dl><dl class="links"><dt><a href= "/reference/unordered_map/unordered_multimap/cbegin/"><b>unordered_multimap::cbegin</b></a></dt><dd>Return const_iterator to beginning <span class="typ">(public member function)</span></dd></dl>
</section>
</div><div id="CH_bb"></div></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="/">C++</a></b></h3>
<ul>
<li class="folder info"><a href="/info/">Information</a></li>
<li class="folder doc"><a href="/doc/">Tutorials</a></li>
<li class="folder selected reference"><a href="/reference/">Reference</a></li>
<li class="folder articles"><a href="/articles/">Articles</a></li>
<li class="folder forum"><a href="/forum/">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="/reference/">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="/reference/clibrary/">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cassert/"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cctype/"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cerrno/"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cfenv/"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cfloat/"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cinttypes/"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ciso646/"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/climits/"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/clocale/"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cmath/"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csetjmp/"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csignal/"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdarg/"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cstdbool/"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstddef/"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cstdint/"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdio/"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdlib/"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstring/"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/ctgmath/"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ctime/"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cuchar/"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwchar/"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwctype/"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="/reference/stl/">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/array/"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/deque/"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/forward_list/"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/list/"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/map/"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/queue/"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/set/"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stack/"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 selected folder"><a href="/reference/unordered_map/"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_set/"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/vector/"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/iolibrary/">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/fstream/"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iomanip/"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ios/"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iosfwd/"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iostream/"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/istream/"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ostream/"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/sstream/"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/streambuf/"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/multithreading/">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/atomic/"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/condition_variable/"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/future/"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/thread/"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/std/">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/algorithm/"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/bitset/"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/chrono/"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/codecvt/"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/complex/"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/exception/"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/functional/"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/initializer_list/"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iterator/"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/limits/"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/locale/"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/memory/"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/new/"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/numeric/"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/random/"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/ratio/"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/regex/"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stdexcept/"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/string/"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/system_error/"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/tuple/"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/typeindex/"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/typeinfo/"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/type_traits/"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/utility/"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/valarray/"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="unordered_map_box">
<h3><b><a href="/reference/unordered_map/">&lt;unordered_map&gt;</a></b></h3>
<ul>
<li class="cpp11 folder"><a href="/reference/unordered_map/unordered_map/"><span>unordered_map</span></a></li>
<li class="cpp11 selected folder"><a href="/reference/unordered_map/unordered_multimap/"><span>unordered_multimap</span></a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="unordered_multimap_box">
<h3><b><a href="/reference/unordered_map/unordered_multimap/">unordered_multimap</a></b></h3>
<ul>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/unordered_multimap/"><span>unordered_multimap::unordered_multimap</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/~unordered_multimap/"><span>unordered_multimap::~unordered_multimap</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/begin/"><span>unordered_multimap::begin</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/bucket/"><span>unordered_multimap::bucket</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/bucket_count/"><span>unordered_multimap::bucket_count</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/bucket_size/"><span>unordered_multimap::bucket_size</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/cbegin/"><span>unordered_multimap::cbegin</span></a></li>
<li class="cpp11 selected"><a href="/reference/unordered_map/unordered_multimap/cend/"><span>unordered_multimap::cend</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/clear/"><span>unordered_multimap::clear</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/count/"><span>unordered_multimap::count</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/emplace/"><span>unordered_multimap::emplace</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/emplace_hint/"><span>unordered_multimap::emplace_hint</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/empty/"><span>unordered_multimap::empty</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/end/"><span>unordered_multimap::end</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/equal_range/"><span>unordered_multimap::equal_range</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/erase/"><span>unordered_multimap::erase</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/find/"><span>unordered_multimap::find</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/get_allocator/"><span>unordered_multimap::get_allocator</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/hash_function/"><span>unordered_multimap::hash_function</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/insert/"><span>unordered_multimap::insert</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/key_eq/"><span>unordered_multimap::key_eq</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/load_factor/"><span>unordered_multimap::load_factor</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/max_bucket_count/"><span>unordered_multimap::max_bucket_count</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/max_load_factor/"><span>unordered_multimap::max_load_factor</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/max_size/"><span>unordered_multimap::max_size</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/operator=/"><span>unordered_multimap::operator=</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/rehash/"><span>unordered_multimap::rehash</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/reserve/"><span>unordered_multimap::reserve</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/size/"><span>unordered_multimap::size</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/swap/"><span>unordered_multimap::swap</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>non-member overloads:</h4><ul>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/operators/"><span>operators (unordered_multimap)</span></a></li>
<li class="cpp11"><a href="/reference/unordered_map/unordered_multimap/swap(global)/"><span>swap (unordered_multimap)</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="/">Home page</a> | <a href="/privacy.do">Privacy policy</a><br>&copy; cplusplus.com, 2000-2016 - All rights reserved - <i>v3.1</i><br><a href="/contact.do?referrer=www.cplusplus.com%2Freference%2Funordered_map%2Funordered_multimap%2Fcend%2F">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','/reference/edit.cgi?a=unordered_map+unordered_multimap+cend'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='/reference/delete.cgi?a=unordered_map+unordered_multimap+cend'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>