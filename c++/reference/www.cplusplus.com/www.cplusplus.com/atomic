<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>atomic - C++ Reference</title>
<link rel="canonical" href="http://www.cplusplus.com/reference/atomic/atomic/">
<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
<link rel="stylesheet" type="text/css" href="/v321/main.css">
<script src="/v321/main.js" type="text/javascript"></script>
<script type='text/javascript'>
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
(function() {
var gads = document.createElement('script');
gads.async = true;
gads.type = 'text/javascript';
var useSSL = 'https:' == document.location.protocol;
gads.src = (useSSL ? 'https:' : 'http:') + 
'//www.googletagservices.com/tag/js/gpt.js';
var node = document.getElementsByTagName('script')[0];
node.parentNode.insertBefore(gads, node);
})();
</script>

<script type='text/javascript'>
googletag.cmd.push(function() {
googletag.defineSlot('/32882001/L', [728, 90], 'div-gpt-ad-1427191279638-0').addService(googletag.pubads());
googletag.enableServices();
});
</script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="/" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="/reference/">Reference</a></li>
<li><a href="/reference/atomic/">&lt;atomic&gt;</a></li>
<li class="here">atomic</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support">
<div id='div-gpt-ad-1427191279638-0' style='width:728px; height:90px;'>
<script type='text/javascript'>
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1427191279638-0'); });
</script>
</div>
</div>
<div id="I_content">
<div class="C_doc">
<div id="I_type">class template</div>
<div id="I_file">&lt;atomic&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span>atomic<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><pre>template &lt;class T&gt; struct atomic;</pre></div><div id="I_description">Atomic</div>
<section id="description">
Objects of atomic types contain a value of a particular type (<samp>T</samp>).<br>
<br>
The main characteristic of atomic objects is that access to this contained value from different threads cannot cause data races (i.e., doing that is <i>well-defined behavior</i>, with accesses properly sequenced). Generally, for all other objects, the possibility of causing a data race for accessing the same object concurrently qualifies the operation as <i>undefined behavior</i>.<br>
<br>
Additionally, <samp><a href="/atomic">atomic</a></samp> objects have the ability to synchronize access to other non-atomic objects in their threads by specifying different <i><a href="/memory_order">memory orders</a></i>.<br>
</section>
<br>
<section id="parameters">
<h3>Template parameters</h3>
<dl>
<dt>T</dt>
<dd>Type of the contained value.<br>
This shall be a <i><a href="/is_trivially_copyable">trivially copyable type</a></i>.<br>
</dd>
</dl>
</section>
<br>
<section id="functions">
<h3>Member functions</h3>
<dl class="links"><dt><a href= "/reference/atomic/atomic/atomic/"><b>(constructor)</b></a></dt><dd>Construct atomic <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/atomic/atomic/operator=/"><b>operator=</b></a></dt><dd>Assign contained value <span class="typ">(public member function)</span></dd></dl>
<br>
<h4>General atomic operations</h4>
<dl class="links"><dt><a href= "/reference/atomic/atomic/is_lock_free/"><b>is_lock_free</b></a></dt><dd>Is lock-free <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/atomic/atomic/store/"><b>store</b></a></dt><dd>Modify contained value <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/atomic/atomic/load/"><b>load</b></a></dt><dd>Read contained value <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/atomic/atomic/operator T/"><b>operator T</b></a></dt><dd>Access contained value <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/atomic/atomic/exchange/"><b>exchange</b></a></dt><dd>Access and modify contained value <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/atomic/atomic/compare_exchange_weak/"><b>compare_exchange_weak</b></a></dt><dd>Compare and exchange contained value (weak) <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/atomic/atomic/compare_exchange_strong/"><b>compare_exchange_strong</b></a></dt><dd>Compare and exchange contained value (strong) <span class="typ">(public member function)</span></dd></dl>
<br>
<h4>Operations supported by certain specializations (integral and/or pointer, see below)</h4>
<dl class="links"><dt><a href= "/reference/atomic/atomic/fetch_add/"><b>fetch_add</b></a></dt><dd>Add to contained value <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/atomic/atomic/fetch_sub/"><b>fetch_sub</b></a></dt><dd>Subtract from contained value <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/atomic/atomic/fetch_and/"><b>fetch_and</b></a></dt><dd>Apply bitwise AND to contained value <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/atomic/atomic/fetch_or/"><b>fetch_or</b></a></dt><dd>Apply bitwise OR to contained value <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/atomic/atomic/fetch_xor/"><b>fetch_xor</b></a></dt><dd>Apply bitwise XOR to contained value <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/atomic/atomic/operatorplusplus/"><b>operator++</b></a></dt><dd>Increment container value <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/atomic/atomic/operatorminusminus/"><b>operator--</b></a></dt><dd>Decrement container value <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/atomic/atomic/operatororequal/"><b>atomic::operator (comp. assign.)</b></a></dt><dd>Compound assignments <span class="typ">(public member function)</span></dd></dl>
</section>
<br>
<section id="specializations">
<h3>Template specializations</h3>
The <samp>atomic</samp> class template is fully specialized for all <i><a href="/is_integral">fundamental integral types</a></i> (except <code>bool</code>), and any extended integral types needed for the typedefs in <samp><a href="/&lt;cstdint&gt;">&lt;cstdint&gt;</a></samp>. These specializations have the following additional member functions:<br>
<table class="boxed"><tr><th>specializations</th><th>additional member functions</th></tr>
<tr><td><code>char<br>
signed char<br>
unsigned char<br>
short<br>
unsigned short<br>
int<br>
unsigned int<br>
long<br>
unsigned long<br>
long long<br>
unsigned long long<br>
char16_t<br>
char32_t<br>
wchar_t</code> <br>
<i>extended integral types</i> (if any)</td><td><samp><a href="/atomic::fetch_add">atomic::fetch_add</a></samp> <br>
<samp><a href="/atomic::fetch_sub">atomic::fetch_sub</a></samp> <br>
<samp><a href="/atomic::fetch_and">atomic::fetch_and</a></samp> <br>
<samp><a href="/atomic::fetch_or">atomic::fetch_or</a></samp> <br>
<samp><a href="/atomic::fetch_xor">atomic::fetch_xor</a></samp> <br>
<samp><a href="/atomic::operator++">atomic::operator++</a></samp> <br>
<samp><a href="/atomic::operator--">atomic::operator--</a></samp> <br>
<samp><a href="/atomic::operator">operator (comp. assign.)</a></samp> <br>
</td></tr>
</table>
For <code>bool</code> instantiations, only the general atomic operations are supported.<br>
Note that most of the <i><a href="/&lt;atomic&gt;#types">C-style atomic types</a></i> are aliases of these specializations (or aliases of a base class inherited by these specializations).<br>
<br>
<samp>atomic</samp> is also partially specialized for all pointer types, with the following additional member functions:<br>
<table class="boxed"><tr><th>specializations</th><th>additional member functions</th></tr>
<tr><td><code>U*</code> <br>
<i>(for any type <samp>U</samp>)</i></td><td><samp><a href="/atomic::fetch_add">atomic::fetch_add</a></samp> <br>
<samp><a href="/atomic::fetch_sub">atomic::fetch_sub</a></samp> <br>
<samp><a href="/atomic::operator++">atomic::operator++</a></samp> <br>
<samp><a href="/atomic::operator--">atomic::operator--</a></samp> <br>
<samp><a href="/atomic::operator">operator (comp. assign.)</a></samp> <br>
</td></tr>
</table>
</section></div><div id="CH_bb"></div></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="/">C++</a></b></h3>
<ul>
<li class="folder info"><a href="/info/">Information</a></li>
<li class="folder doc"><a href="/doc/">Tutorials</a></li>
<li class="folder selected reference"><a href="/reference/">Reference</a></li>
<li class="folder articles"><a href="/articles/">Articles</a></li>
<li class="folder forum"><a href="/forum/">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="/reference/">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="/reference/clibrary/">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cassert/"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cctype/"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cerrno/"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cfenv/"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cfloat/"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cinttypes/"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ciso646/"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/climits/"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/clocale/"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cmath/"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csetjmp/"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csignal/"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdarg/"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cstdbool/"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstddef/"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cstdint/"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdio/"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdlib/"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstring/"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/ctgmath/"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ctime/"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cuchar/"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwchar/"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwctype/"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/stl/">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/array/"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/deque/"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/forward_list/"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/list/"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/map/"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/queue/"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/set/"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stack/"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_map/"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_set/"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/vector/"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/iolibrary/">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/fstream/"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iomanip/"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ios/"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iosfwd/"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iostream/"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/istream/"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ostream/"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/sstream/"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/streambuf/"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="/reference/multithreading/">Multi-threading:</a></h4><ul>
<li class="cpp11 selected folder"><a href="/reference/atomic/"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/condition_variable/"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/future/"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/thread/"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/std/">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/algorithm/"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/bitset/"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/chrono/"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/codecvt/"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/complex/"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/exception/"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/functional/"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/initializer_list/"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iterator/"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/limits/"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/locale/"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/memory/"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/new/"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/numeric/"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/random/"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/ratio/"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/regex/"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stdexcept/"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/string/"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/system_error/"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/tuple/"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/typeindex/"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/typeinfo/"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/type_traits/"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/utility/"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/valarray/"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="atomic_box">
<h3><b><a href="/reference/atomic/">&lt;atomic&gt;</a></b></h3>
<ul>
<li class="C_Collapsable"><h4>classes:</h4><ul>
<li class="cpp11 selected folder"><a href="/reference/atomic/atomic/"><span>atomic</span></a></li>
<li class="cpp11 folder"><a href="/reference/atomic/atomic_flag/"><span>atomic_flag</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>enum types:</h4><ul>
<li class="cpp11"><a href="/reference/atomic/memory_order/"><span>memory_order</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>functions:</h4><ul>
<li class="cpp11"><a href="/reference/atomic/atomic_signal_fence/"><span>atomic_signal_fence</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_thread_fence/"><span>atomic_thread_fence</span></a></li>
<li class="cpp11"><a href="/reference/atomic/kill_dependency/"><span>kill_dependency</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>initialization macros:</h4><ul>
<li class="cpp11"><a href="/reference/atomic/ATOMIC_FLAG_INIT/"><span>ATOMIC_FLAG_INIT</span></a></li>
<li class="cpp11"><a href="/reference/atomic/ATOMIC_VAR_INIT/"><span>ATOMIC_VAR_INIT</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>functions (C-style atomics):</h4><ul>
<li class="cpp11"><a href="/reference/atomic/atomic_compare_exchange_strong/"><span>atomic_compare_exchange_strong</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_compare_exchange_strong_explicit/"><span>atomic_compare_exchange_strong_explicit</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_compare_exchange_weak/"><span>atomic_compare_exchange_weak</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_compare_exchange_weak_explicit/"><span>atomic_compare_exchange_weak_explicit</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_exchange/"><span>atomic_exchange</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_exchange_explicit/"><span>atomic_exchange_explicit</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_fetch_add/"><span>atomic_fetch_add</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_fetch_add_explicit/"><span>atomic_fetch_add_explicit</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_fetch_and/"><span>atomic_fetch_and</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_fetch_and_explicit/"><span>atomic_fetch_and_explicit</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_fetch_or/"><span>atomic_fetch_or</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_fetch_or_explicit/"><span>atomic_fetch_or_explicit</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_fetch_sub/"><span>atomic_fetch_sub</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_fetch_sub_explicit/"><span>atomic_fetch_sub_explicit</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_fetch_xor/"><span>atomic_fetch_xor</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_fetch_xor_explicit/"><span>atomic_fetch_xor_explicit</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_flag_clear/"><span>atomic_flag_clear</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_flag_clear_explicit/"><span>atomic_flag_clear_explicit</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_flag_test_and_set/"><span>atomic_flag_test_and_set</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_flag_test_and_set_explicit/"><span>atomic_flag_test_and_set_explicit</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_init/"><span>atomic_init</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_is_lock_free/"><span>atomic_is_lock_free</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_load/"><span>atomic_load</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_load_explicit/"><span>atomic_load_explicit</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_store/"><span>atomic_store</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic_store_explicit/"><span>atomic_store_explicit</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="atomic_box">
<h3><b><a href="/reference/atomic/atomic/">atomic</a></b></h3>
<ul>
<li class="cpp11"><a href="/reference/atomic/atomic/atomic/"><span>atomic::atomic</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp11"><a href="/reference/atomic/atomic/compare_exchange_strong/"><span>atomic::compare_exchange_strong</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic/compare_exchange_weak/"><span>atomic::compare_exchange_weak</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic/exchange/"><span>atomic::exchange</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic/is_lock_free/"><span>atomic::is_lock_free</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic/load/"><span>atomic::load</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic/operator T/"><span>atomic::operator T</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic/operator=/"><span>atomic::operator=</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic/store/"><span>atomic::store</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>member functions (spec.):</h4><ul>
<li class="cpp11"><a href="/reference/atomic/atomic/fetch_add/"><span>atomic::fetch_add</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic/fetch_and/"><span>atomic::fetch_and</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic/fetch_or/"><span>atomic::fetch_or</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic/fetch_sub/"><span>atomic::fetch_sub</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic/fetch_xor/"><span>atomic::fetch_xor</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic/operatorminusminus/"><span>atomic::operator--</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic/operatororequal/"><span>atomic::operator (comp. assign.)</span></a></li>
<li class="cpp11"><a href="/reference/atomic/atomic/operatorplusplus/"><span>atomic::operator++</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="/">Home page</a> | <a href="/privacy.do">Privacy policy</a><br>&copy; cplusplus.com, 2000-2016 - All rights reserved - <i>v3.1</i><br><a href="/contact.do?referrer=www.cplusplus.com%2Freference%2Fatomic%2Fatomic%2F">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			el.appendChild(btn('New Page','New Page','new','/reference/new.cgi?a=atomic+atomic'));
			el.appendChild(btn('Edit Page','Edit Page','edit','/reference/edit.cgi?a=atomic+atomic'));
			
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='/reference/delete.cgi?a=atomic+atomic'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>