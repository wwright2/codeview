<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>deque::insert - C++ Reference</title>
<link rel="canonical" href="http://www.cplusplus.com/reference/deque/deque/insert/">
<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
<link rel="stylesheet" type="text/css" href="/v321/main.css">
<script src="/v321/main.js" type="text/javascript"></script>
<script type='text/javascript'>
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
(function() {
var gads = document.createElement('script');
gads.async = true;
gads.type = 'text/javascript';
var useSSL = 'https:' == document.location.protocol;
gads.src = (useSSL ? 'https:' : 'http:') + 
'//www.googletagservices.com/tag/js/gpt.js';
var node = document.getElementsByTagName('script')[0];
node.parentNode.insertBefore(gads, node);
})();
</script>

<script type='text/javascript'>
googletag.cmd.push(function() {
googletag.defineSlot('/32882001/L', [728, 90], 'div-gpt-ad-1427191279638-0').addService(googletag.pubads());
googletag.enableServices();
});
</script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="/" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="/reference/">Reference</a></li>
<li><a href="/reference/deque/">&lt;deque&gt;</a></li>
<li><a href="/reference/deque/deque/">deque</a></li>
<li class="here">insert</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support">
<div id='div-gpt-ad-1427191279638-0' style='width:728px; height:90px;'>
<script type='text/javascript'>
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1427191279638-0'); });
</script>
</div>
</div>
<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;deque&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/deque/deque/">deque</a>::insert</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>single element (1)</th><td><pre>iterator insert (iterator position, const value_type&amp; val);</pre></td></tr><tr class="even"><th>fill (2)</th><td><pre>    void insert (iterator position, size_type n, const value_type&amp; val);</pre></td></tr><tr class="odd"><th>range (3)</th><td><pre>template &lt;class InputIterator&gt;    void insert (iterator position, InputIterator first, InputIterator last);</pre></td></tr></table></div>
<div title="C++11" class="off">
<table><tr class="even"><th>single element (1)</th><td><pre>iterator insert (const_iterator position, const value_type&amp; val);</pre></td></tr><tr class="odd"><th>fill (2)</th><td><pre>iterator insert (const_iterator position, size_type n, const value_type&amp; val);</pre></td></tr><tr class="even"><th>range (3)</th><td><pre>template &lt;class InputIterator&gt;iterator insert (const_iterator position, InputIterator first, InputIterator last);</pre></td></tr><tr class="odd"><th>move (4)</th><td><pre>iterator insert (const_iterator position, value_type&amp;&amp; val);</pre></td></tr><tr class="even"><th>initializer list (5)</th><td><pre>iterator insert (const_iterator position, initializer_list&lt;value_type&gt; il);</pre></td></tr></table></div>
</div>
</div><div id="I_description">Insert elements</div>
<section id="description">
The <a href="/deque">deque</a> container is extended by inserting new elements before the element at the specified <i>position</i>.<br>
<br>
This effectively increases the container <a href="/deque::size">size</a> by the amount of elements inserted.<br>
<br>
Double-ended queues are designed to be efficient performing insertions (and removals) from either the end or the beginning of the sequence. Insertions on other positions are usually less efficient than in <a href="/list">list</a> or <a href="/forward_list">forward_list</a> containers.<br>
<br>
The parameters determine how many elements are inserted and to which values they are initialized:<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>position</dt>
<dd>Position in the container where the new elements are inserted.<br>
<tt>iterator</tt> is a member type, defined as a <a href="/RandomAccessIterator">random access iterator</a> type that points to elements.</dd>
<dt>val</dt>
<dd>Value to be copied (or moved) to the inserted elements.<br>
Member type <tt>value_type</tt> is the type of the elements in the container, defined in <a href="/deque">deque</a> as an alias of its first template parameter (<tt>T</tt>).</dd>
<dt>n</dt>
<dd>Number of elements to insert. Each element is initialized to a copy of <i>val</i>.<br>
Member type <tt>size_type</tt> is an unsigned integral type.</dd>
<dt>first, last</dt>
<dd>Iterators specifying a range of elements. Copies of the elements in the range <tt>[first,last)</tt> are inserted at <i>position</i> (in the same order).<br>
Notice that the range includes all the elements between <i>first</i> and <i>last</i>, including the element pointed by <i>first</i> but not the one pointed by <i>last</i>.<br>
The function template argument <tt>InputIterator</tt> shall be an <a href="/InputIterator">input iterator</a> type that points to elements of a type from which <tt>value_type</tt> objects can be constructed.</dd>
<dt>il</dt>
<dd>An <a href="/initializer_list">initializer_list</a> object. Copies of these elements are inserted at <i>position</i> (in the same order).<br>
These objects are automatically constructed from <i>initializer list</i> declarators.<br>
Member type <tt>value_type</tt> is the type of the elements in the container, defined in <a href="/deque">deque</a> as an alias of its first template parameter (<tt>T</tt>).</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
An iterator that points to the first of the newly inserted elements.<br>
<br>
Member type <tt>iterator</tt> is a <a href="/RandomAccessIterator">random access iterator</a> type that points to elements.<br>
<br>
The storage for the new elements is allocated using the container's <a href="/deque::get_allocator">allocator</a>, which may throw exceptions on failure (for the default <a href="/allocator">allocator</a>, <tt>bad_alloc</tt> is thrown if the allocation request does not succeed).<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br></code></pre></td>
<td class="source"><pre><code><cite>// inserting into a deque</cite>
<dfn>#include &lt;iostream&gt;</dfn>
<dfn>#include &lt;deque&gt;</dfn>
<dfn>#include &lt;vector&gt;</dfn>

<var>int</var> main ()
{
  std::deque&lt;<var>int</var>&gt; mydeque;

  <cite>// set some initial values:</cite>
  <var>for</var> (<var>int</var> i=1; i&lt;6; i++) mydeque.push_back(i); <cite>// 1 2 3 4 5</cite>

  std::deque&lt;<var>int</var>&gt;::iterator it = mydeque.begin();
  ++it;

  it = mydeque.insert (it,10);                  <cite>// 1 10 2 3 4 5</cite>
  <cite>// "it" now points to the newly inserted 10</cite>

  mydeque.insert (it,2,20);                     <cite>// 1 20 20 10 2 3 4 5</cite>
  <cite>// "it" no longer valid!</cite>

  it = mydeque.begin()+2;

  std::vector&lt;<var>int</var>&gt; myvector (2,30);
  mydeque.insert (it,myvector.begin(),myvector.end());
                                                <cite>// 1 20 30 30 20 10 2 3 4 5</cite>

  std::cout &lt;&lt; <kbd>"mydeque contains:"</kbd>;
  <var>for</var> (it=mydeque.begin(); it!=mydeque.end(); ++it)
    std::cout &lt;&lt; <kbd>' '</kbd> &lt;&lt; *it;
  std::cout &lt;&lt; <kbd>'\n'</kbd>;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
Output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>mydeque contains: 1 20 30 30 20 10 2 3 4 5
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="complexity">
<h3>Complexity</h3>
Linear on the number of elements inserted (copy/move construction). Plus, depending on the particular library implemention, up to an additional linear in the number of elements between <i>position</i> and one of the ends of the <a href="/deque">deque</a>.<br>
</section>
<br>
<section id="validity">
<h3>Iterator validity</h3>
If the insertion happens at the beginning or the end of the sequence, all iterators related to this container are invalidated, but pointers and references remain valid, referring to the same elements they were referring to before the call.<br>
If the insertion happens anywhere else in the <a href="/deque">deque</a>, all iterators, pointers and references related to this container are invalidated.<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The container is modified.<br>
If the insertion happens at the beginning or the end of the sequence, no contained elements are accessed (although see <i>iterator validity</i> above).<br>
If it happens anywhere else, it is not safe to concurrently access elements.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
If the operation inserts a single element at the <a href="/deque::begin">begin</a> or the <a href="/deque::end">end</a>, there are no changes in the container in case of exception (strong guarantee).<br>
Otherwise, the container is guaranteed to end in a valid state (basic guarantee).<br>
If <a href="/allocator_traits::construct">allocator_traits::construct</a> is not supported with the appropriate arguments for the element constructions, or if an invalid <i>position</i> or  range is specified, it causes <i>undefined behavior</i>.<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/deque/deque/push_back/"><b>deque::push_back</b></a></dt><dd>Add element at the end <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/push_front/"><b>deque::push_front</b></a></dt><dd>Insert element at beginning <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/deque/deque/erase/"><b>deque::erase</b></a></dt><dd>Erase elements <span class="typ">(public member function)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="/">C++</a></b></h3>
<ul>
<li class="folder info"><a href="/info/">Information</a></li>
<li class="folder doc"><a href="/doc/">Tutorials</a></li>
<li class="folder selected reference"><a href="/reference/">Reference</a></li>
<li class="folder articles"><a href="/articles/">Articles</a></li>
<li class="folder forum"><a href="/forum/">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="/reference/">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="/reference/clibrary/">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cassert/"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cctype/"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cerrno/"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cfenv/"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cfloat/"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cinttypes/"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ciso646/"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/climits/"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/clocale/"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cmath/"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csetjmp/"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csignal/"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdarg/"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cstdbool/"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstddef/"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cstdint/"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdio/"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdlib/"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstring/"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/ctgmath/"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ctime/"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cuchar/"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwchar/"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwctype/"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="/reference/stl/">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/array/"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="/reference/deque/"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/forward_list/"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/list/"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/map/"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/queue/"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/set/"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stack/"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_map/"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_set/"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/vector/"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/iolibrary/">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/fstream/"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iomanip/"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ios/"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iosfwd/"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iostream/"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/istream/"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ostream/"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/sstream/"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/streambuf/"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/multithreading/">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/atomic/"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/condition_variable/"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/future/"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/thread/"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/std/">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/algorithm/"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/bitset/"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/chrono/"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/codecvt/"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/complex/"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/exception/"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/functional/"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/initializer_list/"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iterator/"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/limits/"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/locale/"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/memory/"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/new/"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/numeric/"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/random/"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/ratio/"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/regex/"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stdexcept/"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/string/"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/system_error/"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/tuple/"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/typeindex/"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/typeinfo/"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/type_traits/"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/utility/"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/valarray/"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="deque_box">
<h3><b><a href="/reference/deque/">&lt;deque&gt;</a></b></h3>
<ul>
<li class="cpp98 cpp11 selected folder"><a href="/reference/deque/deque/"><span>deque</span></a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="deque_box">
<h3><b><a href="/reference/deque/deque/">deque</a></b></h3>
<ul>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/deque/"><span>deque::deque</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/~deque/"><span>deque::~deque</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/assign/"><span>deque::assign</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/at/"><span>deque::at</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/back/"><span>deque::back</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/begin/"><span>deque::begin</span></a></li>
<li class="cpp11"><a href="/reference/deque/deque/cbegin/"><span>deque::cbegin</span></a></li>
<li class="cpp11"><a href="/reference/deque/deque/cend/"><span>deque::cend</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/clear/"><span>deque::clear</span></a></li>
<li class="cpp11"><a href="/reference/deque/deque/crbegin/"><span>deque::crbegin</span></a></li>
<li class="cpp11"><a href="/reference/deque/deque/crend/"><span>deque::crend</span></a></li>
<li class="cpp11"><a href="/reference/deque/deque/emplace/"><span>deque::emplace</span></a></li>
<li class="cpp11"><a href="/reference/deque/deque/emplace_back/"><span>deque::emplace_back</span></a></li>
<li class="cpp11"><a href="/reference/deque/deque/emplace_front/"><span>deque::emplace_front</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/empty/"><span>deque::empty</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/end/"><span>deque::end</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/erase/"><span>deque::erase</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/front/"><span>deque::front</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/get_allocator/"><span>deque::get_allocator</span></a></li>
<li class="cpp98 cpp11 selected"><a href="/reference/deque/deque/insert/"><span>deque::insert</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/max_size/"><span>deque::max_size</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/operator=/"><span>deque::operator=</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/operator[]/"><span>deque::operator[]</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/pop_back/"><span>deque::pop_back</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/pop_front/"><span>deque::pop_front</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/push_back/"><span>deque::push_back</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/push_front/"><span>deque::push_front</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/rbegin/"><span>deque::rbegin</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/rend/"><span>deque::rend</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/resize/"><span>deque::resize</span></a></li>
<li class="cpp11"><a href="/reference/deque/deque/shrink_to_fit/"><span>deque::shrink_to_fit</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/size/"><span>deque::size</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/swap/"><span>deque::swap</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>non-member overloads:</h4><ul>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/operators/"><span>relational operators (deque)</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/deque/deque/swap-free/"><span>swap (deque)</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="/">Home page</a> | <a href="/privacy.do">Privacy policy</a><br>&copy; cplusplus.com, 2000-2016 - All rights reserved - <i>v3.1</i><br><a href="/contact.do?referrer=www.cplusplus.com%2Freference%2Fdeque%2Fdeque%2Finsert%2F">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','/reference/edit.cgi?a=deque+deque+insert'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='/reference/delete.cgi?a=deque+deque+insert'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>