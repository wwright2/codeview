<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>condition_variable::wait_until - C++ Reference</title>
<link rel="canonical" href="http://www.cplusplus.com/reference/condition_variable/condition_variable/wait_until/">
<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
<link rel="stylesheet" type="text/css" href="/v321/main.css">
<script src="/v321/main.js" type="text/javascript"></script>
<script type='text/javascript'>
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
(function() {
var gads = document.createElement('script');
gads.async = true;
gads.type = 'text/javascript';
var useSSL = 'https:' == document.location.protocol;
gads.src = (useSSL ? 'https:' : 'http:') + 
'//www.googletagservices.com/tag/js/gpt.js';
var node = document.getElementsByTagName('script')[0];
node.parentNode.insertBefore(gads, node);
})();
</script>

<script type='text/javascript'>
googletag.cmd.push(function() {
googletag.defineSlot('/32882001/L', [728, 90], 'div-gpt-ad-1427191279638-0').addService(googletag.pubads());
googletag.enableServices();
});
</script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="/" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="/reference/">Reference</a></li>
<li><a href="/reference/condition_variable/">&lt;condition_variable&gt;</a></li>
<li><a href="/reference/condition_variable/condition_variable/">condition_variable</a></li>
<li class="here">wait_until</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support">
<div id='div-gpt-ad-1427191279638-0' style='width:728px; height:90px;'>
<script type='text/javascript'>
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1427191279638-0'); });
</script>
</div>
</div>
<div id="I_content">
<div class="C_doc">
<div id="I_type">public member function</div>
<div id="I_file">&lt;condition_variable&gt;</div>
<h1><span class="namespace" title="namespace std">std::</span><a href="/reference/condition_variable/condition_variable/">condition_variable</a>::wait_until<span class="C_ico cpp11warning" title="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it." alt="This page describes a feature introduced by the latest revision of the C++ standard (2011). Older compilers may not support it."></span></h1>
<div class="C_prototype"><table><tr class="odd"><th>unconditional (1)</th><td><pre>template &lt;class Clock, class Duration&gt;  cv_status wait_until (unique_lock&lt;mutex&gt;&amp; lck,                        const chrono::time_point&lt;Clock,Duration&gt;&amp; abs_time);</pre></td></tr><tr class="even"><th>predicate (2)</th><td><pre>template &lt;class Clock, class Duration, class Predicate&gt;       bool wait_until (unique_lock&lt;mutex&gt;&amp; lck,                        const chrono::time_point&lt;Clock,Duration&gt;&amp; abs_time,                        Predicate pred);</pre></td></tr></table></div><div id="I_description">Wait until notified or time point</div>
<section id="description">
The execution of the current thread (which shall have locked <var>lck</var>'s <i><a href="/mutex">mutex</a></i>) is blocked either until <i><a href="/condition_variable::notify_one">notified</a></i> or until <var>abs_time</var>, whichever happens first.<br>
<br>
At the moment of blocking the thread, the function automatically calls <code><a href="/unique_lock::unlock">lck.unlock()</a></code>, allowing other locked threads to continue.<br>
<br>
Once <i><a href="/condition_variable::notify_one">notified</a></i> or once it is <var>abs_time</var>, the function unblocks and calls <code><a href="/unique_lock::lock">lck.lock()</a></code>, leaving <var>lck</var> in the same state as when the function was called. Then the function returns (notice that this last <i>mutex locking</i> may block again the thread before returning).<br>
<br>
Generally, the function is <i>notified</i> to wake up by a call in another thread either to member <samp><a href="/unique_lock::notify_one">notify_one</a></samp> or to member <samp><a href="/unique_lock::notify_all">notify_all</a></samp>. But certain implementations may produce <i>spurious wake-up calls</i> without any of these functions being called. Therefore, users of this function shall ensure their condition for resumption is met.<br>
<br>
If <var>pred</var> is specified <i>(2)</i>, the function only blocks if <var>pred</var> returns <code>false</code>, and notifications can only unblock the thread when it becomes <code>true</code> (which is especially useful to check against <i>spurious wake-up calls</i>). It behaves as if implemented as:<br>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br></code></pre></td>
<td class="source"><pre><code><var>while</var> (!pred())
  <var>if</var> ( wait_until(lck,abs_time) == cv_status::timeout)
    <var>return</var> pred();
<var>return</var> <var>true</var>;</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>lck</dt>
<dd>A <samp><a href="/unique_lock">unique_lock</a></samp> object whose <i><a href="/mutex">mutex object</a></i> is currently locked by this thread.<br>
All concurrent calls to <i>wait member functions</i> of this object shall use the same underlying <i>mutex object</i> (as returned by <code><a href="/unique_lock::mutex">lck.mutex()</a></code>).<br>
</dd>
<dt>abs_time</dt>
<dd>A point in time at which the thread will stop blocking, allowing the function to return.<br>
<samp><a href="/time_point">time_point</a></samp> is an object that represents a specific <i>absolute time</i>.</dd>
<dt>pred</dt>
<dd>A callable object or function that takes no arguments and returns a value that can be evaluated as a <code>bool</code>.<br>
This is called repeatedly until it evaluates to <code>true</code>.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
The <i>unconditional version (1)</i> returns <samp><a href="/cv_status::timeout">cv_status::timeout</a></samp> if the function returns because <var>abs_time</var> has been reached, or <samp><a href="/cv_status::no_timeout">cv_status::no_timeout</a></samp> otherwise.<br>
The <i>predicate version (2)</i> returns <code>pred()</code>, regardless of whether the timeout was triggered (although it can only be <code>false</code> if triggered).<br>
</section>
<br>
<section id="access">
<h3>Data races</h3>
The function performs three atomic operations:<br>
<ul>
<li>The initial unlocking of <var>lck</var> and simultaneous entry into the waiting state.</li>
<li>The unblocking of the waiting state.</li>
<li>The locking of <var>lck</var> before returning.</li>
</ul>
Atomic operations on the object are ordered according to a single total order, with the three atomic operations in this function happening in the same relative as above.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
If any parameter has a value that is not valid for this function (such as if <var>lck</var>'s <i><a href="/mutex">mutex object</a></i> is not locked by the calling thread), it causes <i>undefined behavior</i>.<br>
<br>
Otherwise, if an exception is thrown, both the <code><a href="/condition_variable">condition_variable</a></code> object and the arguments are in a valid state (basic guarantee).<br>
<br>
<div class="C_SwitchCases">
<div title="C++11">
It may throw <samp><a href="/system_error">system_error</a></samp> in case of failure (transmitting any error condition from the respective call to <samp><a href="/unique_lock::lock">lock</a></samp> or <samp><a href="/unique_lock::unlock">unlock</a></samp>).<br>
<br>
The <i>predicate version (2)</i> may also throw any exception thrown by <var>pred</var>.<br>
<br>
On exception, the state of <var>lck</var> is attempted to be restored before exiting the function scope (by calling <code>lck.lock()</code>).<br>
</div>
<div title="C++14">
It may throw if an operation related to <var>abs_time</var> throws (note that operations on the standard <i>clock</i> and <i>duration</i> types provided in <code><a href="/&lt;chrono&gt;">&lt;chrono&gt;</a></code> never throw).<br>
<br>
The <i>predicate version (2)</i> may also throw exceptions thrown by <var>pred</var>.<br>
<br>
If the function is not able to restore the lock and return at some point (such as if some attempt to lock or unlock throws), <samp><a href="/terminate">std::terminate</a></samp> is called.<br>
</div>
</div>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/condition_variable/condition_variable/wait_for/"><b>condition_variable::wait_for</b></a></dt><dd>Wait for timeout or until notified <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/condition_variable/condition_variable/wait/"><b>condition_variable::wait</b></a></dt><dd>Wait until notified <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/condition_variable/condition_variable/notify_one/"><b>condition_variable::notify_one</b></a></dt><dd>Notify one <span class="typ">(public member function)</span></dd></dl><dl class="links"><dt><a href= "/reference/condition_variable/condition_variable/notify_all/"><b>condition_variable::notify_all</b></a></dt><dd>Notify all <span class="typ">(public member function)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="/">C++</a></b></h3>
<ul>
<li class="folder info"><a href="/info/">Information</a></li>
<li class="folder doc"><a href="/doc/">Tutorials</a></li>
<li class="folder selected reference"><a href="/reference/">Reference</a></li>
<li class="folder articles"><a href="/articles/">Articles</a></li>
<li class="folder forum"><a href="/forum/">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="/reference/">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="/reference/clibrary/">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cassert/"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cctype/"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cerrno/"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cfenv/"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cfloat/"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cinttypes/"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ciso646/"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/climits/"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/clocale/"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cmath/"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csetjmp/"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csignal/"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdarg/"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cstdbool/"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstddef/"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cstdint/"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdio/"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdlib/"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstring/"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/ctgmath/"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ctime/"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cuchar/"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwchar/"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwctype/"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/stl/">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/array/"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/deque/"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/forward_list/"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/list/"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/map/"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/queue/"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/set/"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stack/"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_map/"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_set/"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/vector/"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/iolibrary/">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/fstream/"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iomanip/"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ios/"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iosfwd/"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iostream/"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/istream/"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ostream/"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/sstream/"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/streambuf/"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="/reference/multithreading/">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/atomic/"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 selected folder"><a href="/reference/condition_variable/"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/future/"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/thread/"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/std/">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/algorithm/"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/bitset/"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/chrono/"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/codecvt/"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/complex/"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/exception/"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/functional/"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/initializer_list/"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iterator/"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/limits/"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/locale/"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/memory/"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/new/"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/numeric/"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/random/"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/ratio/"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/regex/"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stdexcept/"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/string/"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/system_error/"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/tuple/"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/typeindex/"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/typeinfo/"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/type_traits/"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/utility/"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/valarray/"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="condition_variable_box">
<h3><b><a href="/reference/condition_variable/">&lt;condition_variable&gt;</a></b></h3>
<ul>
<li class="C_Collapsable"><h4>classes:</h4><ul>
<li class="cpp11 selected folder"><a href="/reference/condition_variable/condition_variable/"><span>condition_variable</span></a></li>
<li class="cpp11 folder"><a href="/reference/condition_variable/condition_variable_any/"><span>condition_variable_any</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>enum classes:</h4><ul>
<li class="cpp11"><a href="/reference/condition_variable/cv_status/"><span>cv_status</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>functions:</h4><ul>
<li class="cpp11"><a href="/reference/condition_variable/notify_all_at_thread_exit/"><span>notify_all_at_thread_exit</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp11" id="condition_variable_box">
<h3><b><a href="/reference/condition_variable/condition_variable/">condition_variable</a></b></h3>
<ul>
<li class="cpp11"><a href="/reference/condition_variable/condition_variable/condition_variable/"><span>condition_variable::condition_variable</span></a></li>
<li class="cpp11"><a href="/reference/condition_variable/condition_variable/~condition_variable/"><span>condition_variable::~condition_variable</span></a></li>
<li class="C_Collapsable"><h4>member functions:</h4><ul>
<li class="cpp11"><a href="/reference/condition_variable/condition_variable/notify_all/"><span>condition_variable::notify_all</span></a></li>
<li class="cpp11"><a href="/reference/condition_variable/condition_variable/notify_one/"><span>condition_variable::notify_one</span></a></li>
<li class="cpp11"><a href="/reference/condition_variable/condition_variable/wait/"><span>condition_variable::wait</span></a></li>
<li class="cpp11"><a href="/reference/condition_variable/condition_variable/wait_for/"><span>condition_variable::wait_for</span></a></li>
<li class="cpp11 selected"><a href="/reference/condition_variable/condition_variable/wait_until/"><span>condition_variable::wait_until</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="/">Home page</a> | <a href="/privacy.do">Privacy policy</a><br>&copy; cplusplus.com, 2000-2016 - All rights reserved - <i>v3.1</i><br><a href="/contact.do?referrer=www.cplusplus.com%2Freference%2Fcondition_variable%2Fcondition_variable%2Fwait_until%2F">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','/reference/edit.cgi?a=condition_variable+condition_variable+wait_until'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='/reference/delete.cgi?a=condition_variable+condition_variable+wait_until'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>