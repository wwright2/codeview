<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>operator new - C++ Reference</title>
<link rel="canonical" href="http://www.cplusplus.com/reference/new/operator new/">
<link rel="shortcut icon" type="image/x-icon" href="/favicon.ico">
<link rel="stylesheet" type="text/css" href="/v321/main.css">
<script src="/v321/main.js" type="text/javascript"></script>
<script type='text/javascript'>
var googletag = googletag || {};
googletag.cmd = googletag.cmd || [];
(function() {
var gads = document.createElement('script');
gads.async = true;
gads.type = 'text/javascript';
var useSSL = 'https:' == document.location.protocol;
gads.src = (useSSL ? 'https:' : 'http:') + 
'//www.googletagservices.com/tag/js/gpt.js';
var node = document.getElementsByTagName('script')[0];
node.parentNode.insertBefore(gads, node);
})();
</script>

<script type='text/javascript'>
googletag.cmd.push(function() {
googletag.defineSlot('/32882001/L', [728, 90], 'div-gpt-ad-1427191279638-0').addService(googletag.pubads());
googletag.enableServices();
});
</script>
</head>
<body>
<div id="I_top">
<div id="I_header">
<div id="I_logo"><a href="/" title="cplusplus.com"><div></div></a></div>
<div id="I_search">
<form id="search" action="/search.do" method="get">
Search: <input name="q" size="20" class="txt"> <input type="submit" value="Go" class="btn">
</form>
</div>
<div id="I_bar">
<ul>
<li><a href="/reference/">Reference</a></li>
<li><a href="/reference/new/">&lt;new&gt;</a></li>
<li class="here">operator new</li>
</ul>
</div>
<div id="I_user" class="C_LoginBox"><span title="ajax"></span></div>
</div>
</div>
<div id="I_mid">
<div id="I_wrap">
<div id="I_minheight"></div>
<div id="I_main">
<div class="C_support">
<div id='div-gpt-ad-1427191279638-0' style='width:728px; height:90px;'>
<script type='text/javascript'>
googletag.cmd.push(function() { googletag.display('div-gpt-ad-1427191279638-0'); });
</script>
</div>
</div>
<div id="I_content">
<div class="C_doc">
<div id="I_type">function</div>
<div id="I_file">&lt;new&gt;</div>
<h1>operator new</h1>
<div class="C_prototype"><div class="C_SwitchCases">
<div title="C++98">
<table><tr class="odd"><th>throwing (1)</th><td><pre>void* operator new (std::size_t size) throw (std::bad_alloc);</pre></td></tr><tr class="even"><th>nothrow (2)</th><td><pre>void* operator new (std::size_t size, const std::nothrow_t&amp; nothrow_value) throw();</pre></td></tr><tr class="odd"><th>placement (3)</th><td><pre>void* operator new (std::size_t size, void* ptr) throw();</pre></td></tr></table></div>
<div title="C++11" class="off">
<table><tr class="even"><th>throwing (1)</th><td><pre>void* operator new (std::size_t size);</pre></td></tr><tr class="odd"><th>nothrow (2)</th><td><pre>void* operator new (std::size_t size, const std::nothrow_t&amp; nothrow_value) noexcept;</pre></td></tr><tr class="even"><th>placement (3)</th><td><pre>void* operator new (std::size_t size, void* ptr) noexcept;</pre></td></tr></table></div>
</div>
</div><div id="I_description">Allocate storage space</div>
<section id="description">
Default <i>allocation functions</i> (single-object form).<br>
<br>
<dl>
<dt>(1) throwing allocation</dt>
<dd>
Allocates <var>size</var> bytes of storage, suitably aligned to represent any object of that size, and returns a non-null pointer to the first byte of this block.<br>
On failure, it throws a <samp><a href="/bad_alloc">bad_alloc</a></samp> exception.<br>
</dd>
<dt>(2) nothrow allocation</dt>
<dd>
Same as above <i>(1)</i>, except that on failure it returns a <i>null pointer</i> instead of throwing an exception.<br>
<div class="C_SwitchCases">
<div title="C++98">
If replaced, both the first and second versions shall return pointers with identical properties.<br>
</div>
<div title="C++11">
The default definition allocates memory by calling the the first version: <code>::operator new (size)</code>.<br>
If replaced, both the first and second versions shall return pointers with identical properties.<br>
</div>
</div>
</dd>
<dt>(3) placement</dt>
<dd>
Simply returns <var>ptr</var> (no storage is allocated).<br>
Notice though that, if the function is called by a <i>new-expression</i>, the proper initialization will be performed (for class objects, this includes calling its default constructor).<br>
</dd>
</dl>
<br>
The default <i>allocation and deallocation functions</i> are special components of the standard library; They have the following unique properties:<br>
<ul>
<li><b>Global:</b> All three versions of <code>operator new</code> are declared in the global namespace, not within the <samp>std</samp> namespace.</li>
<li><b>Implicit:</b> The allocating versions (<i>(1)</i> and <i>(2)</i>) are <i>implicitly declared</i> in every translation unit of a C++ program, no matter whether header <code><a href="/&lt;new&gt;">&lt;new&gt;</a></code> is included or not.</li>
<li><b>Replaceable</b>: The allocating versions (<i>(1)</i> and <i>(2)</i>) are also <i>replaceable</i>: A program may provide its own definition that replaces the one provided by default to produce the result described above, or can overload it for specific types.</li>
</ul>
<br>
If <samp><a href="/set_new_handler">set_new_handler</a></samp> has been used to define a <samp><a href="/new_handler">new_handler</a></samp> function, this <i>new-handler</i> function is called by the default definitions of the allocating versions (<i>(1)</i> and <i>(2)</i>) if they fail to allocate the requested storage.<br>
<br>
<code>operator new</code> can be called explicitly as a regular function, but in C++, <code>new</code> is an operator with a very specific behavior: An expression with the <code>new</code> operator, first calls function <code>operator new</code> (i.e., this function) with the size of its type specifier as first argument, and if this is successful, it then automatically initializes or constructs the object (if needed). Finally, the expression evaluates as a pointer to the appropriate type.<br>
</section>
<br>
<section id="parameters">
<h3>Parameters</h3>
<dl>
<dt>size</dt>
<dd>Size in bytes of the requested memory block.<br>
This is the size of the <i>type specifier</i> in the <i>new-expression</i> when called automatically by such an expression.<br>
If this argument is zero, the function still returns a distinct non-null pointer on success (although dereferencing this pointer leads to <i>undefined behavior</i>).<br>
<samp><a href="/size_t">size_t</a></samp> is an integral type.</dd>
<dt>nothrow_value</dt>
<dd>The constant <samp><a href="/nothrow">nothrow</a></samp>.<br>
This parameter is only used to distinguish it from the first version with an overloaded version. When the <samp><a href="/nothrow">nothrow</a></samp> constant is passed as second parameter to <code>operator new</code>, <code>operator new</code> returns a null-pointer on failure instead of throwing a <samp><a href="/bad_alloc">bad_alloc</a></samp> exception.<br>
<samp><a href="/nothrow_t">nothrow_t</a></samp> is the type of constant <samp><a href="/nothrow">nothrow</a></samp>.<br>
</dd>
<dt>ptr</dt>
<dd>A pointer to an already-allocated memory block of the proper size.<br>
If called by a <i>new-expression</i>, the object is initialized (or constructed) at this location.</dd>
</dl>
</section>
<br>
<section id="return">
<h3>Return value</h3>
For the first and second versions, a pointer to the newly allocated storage space.<br>
For the third version, <var>ptr</var> is returned.<br>
</section>
<br>
<section id="example">
<h3>Example</h3>
<div class="auto"><table class="snippet"><tr><td class="rownum"><pre><code>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>10<br>11<br>12<br>13<br>14<br>15<br>16<br>17<br>18<br>19<br>20<br>21<br>22<br>23<br>24<br>25<br>26<br>27<br>28<br>29<br>30<br>31<br>32<br>33<br>34<br>35<br>36<br>37<br>38<br></code></pre></td>
<td class="source"><pre><code><cite>// operator new example</cite>
<dfn>#include &lt;iostream&gt;     </dfn><cite>// std::cout</cite>
<dfn>#include &lt;new&gt;          </dfn><cite>// ::operator new</cite>

<var>struct</var> MyClass {
  <var>int</var> data[100];
  MyClass() {std::cout &lt;&lt; <kbd>"constructed ["</kbd> &lt;&lt; <var>this</var> &lt;&lt; <kbd>"]\n"</kbd>;}
};

<var>int</var> main () {

  std::cout &lt;&lt; <kbd>"1: "</kbd>;
  MyClass * p1 = <var>new</var> MyClass;
      <cite>// allocates memory by calling: operator new (sizeof(MyClass))</cite>
      <cite>// and then constructs an object at the newly allocated space</cite>

  std::cout &lt;&lt; <kbd>"2: "</kbd>;
  MyClass * p2 = <var>new</var> (std::nothrow) MyClass;
      <cite>// allocates memory by calling: operator new (sizeof(MyClass),std::nothrow)</cite>
      <cite>// and then constructs an object at the newly allocated space</cite>

  std::cout &lt;&lt; <kbd>"3: "</kbd>;
  <var>new</var> (p2) MyClass;
      <cite>// does not allocate memory -- calls: operator new (sizeof(MyClass),p2)</cite>
      <cite>// but constructs an object at p2</cite>

  <cite>// Notice though that calling this function directly does not construct an object:</cite>
  std::cout &lt;&lt; <kbd>"4: "</kbd>;
  MyClass * p3 = (MyClass*) ::<var>operator</var> <var>new</var> (<var>sizeof</var>(MyClass));
      <cite>// allocates memory by calling: operator new (sizeof(MyClass))</cite>
      <cite>// but does not call MyClass's constructor</cite>

  <var>delete</var> p1;
  <var>delete</var> p2;
  <var>delete</var> p3;

  <var>return</var> 0;
}</code></pre></td><td class="C_btnholder"></td></tr></table></div>
<br>
<br>
Possible output:<br>
<div class="auto"><table class="snippet"><tr><td class="output"><pre><samp>
1: constructed [0x8f0f70]
2: constructed [0x8f23a8]
3: constructed [0x8f23a8]
4: 
</samp></pre></td></tr></table></div>
</section>
<br>
<section id="access">
<h3>Data races</h3>
Modifies the storage referenced by the returned value.<br>
Calls to <i>allocation and deallocation functions</i> that reuse the same unit of storage shall occur in a single total order where each deallocation happens entirely before the next allocation.<br>
This shall also apply to the observable behavior of custom replacements for this function.<br>
</section>
<br>
<section id="exceptions">
<h3>Exception safety</h3>
The first version <i>(1)</i> throws <samp><a href="/bad_alloc">bad_alloc</a></samp> if it fails to allocate storage.<br>
Otherwise, it throws no exceptions (no-throw guarantee).<br>
</section>
<br>
<section id="see">
<h3>See also</h3>
<dl class="links"><dt><a href= "/reference/new/operator new[]/"><b>operator new[]</b></a></dt><dd>Allocate storage space for array <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/new/operator delete/"><b>operator delete</b></a></dt><dd>Deallocate storage space <span class="typ">(function)</span></dd></dl><dl class="links"><dt><a href= "/reference/new/nothrow/"><b>nothrow</b></a></dt><dd>Nothrow constant <span class="typ">(constant)</span></dd></dl><dl class="links"><dt><a href= "/reference/new/bad_alloc/"><b>bad_alloc</b></a></dt><dd>Exception thrown on failure allocating memory <span class="typ">(class)</span></dd></dl>
</section></div><div id="CH_bb"></div></div>
</div>
<div id="I_nav">
<div class="sect root">
<h3><b><a href="/">C++</a></b></h3>
<ul>
<li class="folder info"><a href="/info/">Information</a></li>
<li class="folder doc"><a href="/doc/">Tutorials</a></li>
<li class="folder selected reference"><a href="/reference/">Reference</a></li>
<li class="folder articles"><a href="/articles/">Articles</a></li>
<li class="folder forum"><a href="/forum/">Forum</a></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect" id="reference_box">
<h3><b><a href="/reference/">Reference</a></b></h3>
<ul>
<li class="C_Collapsable collapsed"><h4><a href="/reference/clibrary/">C library:</a></h4><ul>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cassert/"><span>&lt;cassert&gt; (assert.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cctype/"><span>&lt;cctype&gt; (ctype.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cerrno/"><span>&lt;cerrno&gt; (errno.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cfenv/"><span>&lt;cfenv&gt; (fenv.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cfloat/"><span>&lt;cfloat&gt; (float.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cinttypes/"><span>&lt;cinttypes&gt; (inttypes.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ciso646/"><span>&lt;ciso646&gt; (iso646.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/climits/"><span>&lt;climits&gt; (limits.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/clocale/"><span>&lt;clocale&gt; (locale.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cmath/"><span>&lt;cmath&gt; (math.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csetjmp/"><span>&lt;csetjmp&gt; (setjmp.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/csignal/"><span>&lt;csignal&gt; (signal.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdarg/"><span>&lt;cstdarg&gt; (stdarg.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cstdbool/"><span>&lt;cstdbool&gt; (stdbool.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstddef/"><span>&lt;cstddef&gt; (stddef.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/cstdint/"><span>&lt;cstdint&gt; (stdint.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdio/"><span>&lt;cstdio&gt; (stdio.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstdlib/"><span>&lt;cstdlib&gt; (stdlib.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cstring/"><span>&lt;cstring&gt; (string.h)</span></a></li>
<li class="c99 cpp11 folder"><a href="/reference/ctgmath/"><span>&lt;ctgmath&gt; (tgmath.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/ctime/"><span>&lt;ctime&gt; (time.h)</span></a></li>
<li class="cpp11 folder"><a href="/reference/cuchar/"><span>&lt;cuchar&gt; (uchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwchar/"><span>&lt;cwchar&gt; (wchar.h)</span></a></li>
<li class="c90 c99 arm cpp98 cpp11 folder"><a href="/reference/cwctype/"><span>&lt;cwctype&gt; (wctype.h)</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/stl/">Containers:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/array/"><span>&lt;array&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/deque/"><span>&lt;deque&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/forward_list/"><span>&lt;forward_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/list/"><span>&lt;list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/map/"><span>&lt;map&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/queue/"><span>&lt;queue&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/set/"><span>&lt;set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stack/"><span>&lt;stack&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_map/"><span>&lt;unordered_map&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/unordered_set/"><span>&lt;unordered_set&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/vector/"><span>&lt;vector&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/iolibrary/">Input/Output:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/fstream/"><span>&lt;fstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iomanip/"><span>&lt;iomanip&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ios/"><span>&lt;ios&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iosfwd/"><span>&lt;iosfwd&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iostream/"><span>&lt;iostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/istream/"><span>&lt;istream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/ostream/"><span>&lt;ostream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/sstream/"><span>&lt;sstream&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/streambuf/"><span>&lt;streambuf&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable collapsed"><h4><a href="/reference/multithreading/">Multi-threading:</a></h4><ul>
<li class="cpp11 folder"><a href="/reference/atomic/"><span>&lt;atomic&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/condition_variable/"><span>&lt;condition_variable&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/future/"><span>&lt;future&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/mutex/"><span>&lt;mutex&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/thread/"><span>&lt;thread&gt;</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4><a href="/reference/std/">Other:</a></h4><ul>
<li class="cpp98 cpp11 folder"><a href="/reference/algorithm/"><span>&lt;algorithm&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/bitset/"><span>&lt;bitset&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/chrono/"><span>&lt;chrono&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/codecvt/"><span>&lt;codecvt&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/complex/"><span>&lt;complex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/exception/"><span>&lt;exception&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/functional/"><span>&lt;functional&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/initializer_list/"><span>&lt;initializer_list&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/iterator/"><span>&lt;iterator&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/limits/"><span>&lt;limits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/locale/"><span>&lt;locale&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/memory/"><span>&lt;memory&gt;</span></a></li>
<li class="cpp98 cpp11 selected folder"><a href="/reference/new/"><span>&lt;new&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/numeric/"><span>&lt;numeric&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/random/"><span>&lt;random&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/ratio/"><span>&lt;ratio&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/regex/"><span>&lt;regex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/stdexcept/"><span>&lt;stdexcept&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/string/"><span>&lt;string&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/system_error/"><span>&lt;system_error&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/tuple/"><span>&lt;tuple&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/typeindex/"><span>&lt;typeindex&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/typeinfo/"><span>&lt;typeinfo&gt;</span></a></li>
<li class="cpp11 folder"><a href="/reference/type_traits/"><span>&lt;type_traits&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/utility/"><span>&lt;utility&gt;</span></a></li>
<li class="cpp98 cpp11 folder"><a href="/reference/valarray/"><span>&lt;valarray&gt;</span></a></li>
</ul></li>
</ul>
</div>
<div class="C_BoxLabels C_BoxSort sect cpp98 cpp11" id="new_box">
<h3><b><a href="/reference/new/">&lt;new&gt;</a></b></h3>
<ul>
<li class="C_Collapsable"><h4>functions (global namespace):</h4><ul>
<li class="cpp98 cpp11"><a href="/reference/new/operator delete/"><span>operator delete</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/new/operator delete[]/"><span>operator delete[]</span></a></li>
<li class="cpp98 cpp11 selected"><a href="/reference/new/operator new/"><span>operator new</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/new/operator new[]/"><span>operator new[]</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>functions (std namespace):</h4><ul>
<li class="cpp11"><a href="/reference/new/get_new_handler/"><span>get_new_handler</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/new/set_new_handler/"><span>set_new_handler</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>types:</h4><ul>
<li class="cpp98 cpp11"><a href="/reference/new/bad_alloc/"><span>bad_alloc</span></a></li>
<li class="cpp11"><a href="/reference/new/bad_array_new_length/"><span>bad_array_new_length</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/new/new_handler/"><span>new_handler</span></a></li>
<li class="cpp98 cpp11"><a href="/reference/new/nothrow_t/"><span>nothrow_t</span></a></li>
</ul></li>
<li class="C_Collapsable"><h4>constants:</h4><ul>
<li class="cpp98 cpp11"><a href="/reference/new/nothrow/"><span>nothrow</span></a></li>
</ul></li>
</ul>
</div>
<div id="I_subnav"></div>
<div class="C_ad234">
<script type="text/javascript"><!--
google_ad_client = "ca-pub-7688470879129516";
google_ad_slot = "7445514729";
google_ad_width = 234;
google_ad_height = 60;
//-->
</script>
<script type="text/javascript"
src="http://pagead2.googlesyndication.com/pagead/show_ads.js">
</script>
</div></div>
<div id="I_midclear"></div>
</div>
</div>
<div id="I_bottom">
<div id="I_footer">
	<a href="/">Home page</a> | <a href="/privacy.do">Privacy policy</a><br>&copy; cplusplus.com, 2000-2016 - All rights reserved - <i>v3.1</i><br><a href="/contact.do?referrer=www.cplusplus.com%2Freference%2Fnew%2Foperator%2520new%2F">Spotted an error? contact us</a>
</div>
</div>

<script type="text/javascript">
<!--
 onSession ( function(us) {
		el=document.getElementById('CH_bb'); el.innerHTML='';
		if (us.auth(4096)) {
			
			el.appendChild(btn('Edit Page','Edit Page','edit','/reference/edit.cgi?a=new+operator%20new'));
			el.appendChild(btn('Delete Page','Delete Page','delete','javascript:docdel()'));
		}
	});
	function docdel() { if (confirm('WARNING: You are about to delete this page. Confirm?')) window.location='/reference/delete.cgi?a=new+operator%20new'; }
	ready();
var _gaq = _gaq || [];
_gaq.push(['_setAccount', 'UA-521783-1']);
_gaq.push(['_trackPageview']);

(function() {
  var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
  ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
  var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
})();

//-->
</script>

</body>
</html>